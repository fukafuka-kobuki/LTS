const X_MAX = 2
const Y_MAX = 2
range X = 0..X_MAX
range Y = 0..Y_MAX


set Out ={move[X_MAX+1][Y], move[X][Y_MAX+1], move[-1][Y], move[X][-1],  jump[X_MAX+1][Y], jump[X][Y_MAX+1], jump[-1][Y], jump[X][-1]}
set JumpAction = {jump[X][Y]}
set MoveAction = {move[X][Y],JumpAction,stop[X][Y], Out}
set Controllable = {on,off, navi,MoveAction, Out}
set Actions ={Controllable, end, out}


fluent OFF = <off, on>
fluent ON = <on, off>

//fluent LOCATION[0][0] =<{stop[x][y]},{MoveAction}\{stop[x][y]}>initially 1
fluent LOCATION[x:X][y:Y]=<{stop[x][y]},{MoveAction}\{stop[x][y]}>
fluent NAVIGATION = <navi, end>
fluent JUMP[x:X][y:Y] = <jump[x][y],MoveAction\{jump[x][y]}>
fluent MOVE[x:X][y:Y] = <move[x][y],MoveAction\{move[x][y]}>



assert TURN_OFF = (LOCATION[0][0]&&OFF)
assert TURN_ON = ON
assert NAVIGATION_GOAL = (LOCATION[2][2]&&NAVIGATION)



assert MISS_MOVE0010 =(LOCATION[0][0]&&MOVE[1][0])
assert MISS_MOVE0001 =(LOCATION[0][0]&&MOVE[0][1])
assert MISS_JUMP1020 =(LOCATION[1][0]&&JUMP[2][0])
assert MISS_JUMP1011 =(LOCATION[1][0]&&JUMP[1][1])
assert MISS_MOVE1000 =(LOCATION[1][0]&&MOVE[0][0])
assert MISS_JUMP2021 =(LOCATION[2][0]&&JUMP[2][1])
assert MISS_JUMP2010 =(LOCATION[2][0]&&JUMP[1][0])
assert MISS_JUMP0102 =(LOCATION[0][1]&&JUMP[0][2])
assert MISS_JUMP0111 =(LOCATION[0][1]&&JUMP[1][1])
assert MISS_MOVE0100 =(LOCATION[0][1]&&MOVE[0][0])
assert MISS_JUMP1112 =(LOCATION[1][1]&&JUMP[1][2])
assert MISS_JUMP1101 =(LOCATION[1][1]&&JUMP[0][1])
assert MISS_JUMP1121 =(LOCATION[1][1]&&JUMP[2][1])
assert MISS_JUMP1110 =(LOCATION[1][1]&&JUMP[1][0])
assert MISS_JUMP2122 =(LOCATION[2][1]&&JUMP[2][2])
assert MISS_JUMP2112 =(LOCATION[2][1]&&JUMP[1][2])
assert MISS_JUMP0201 =(LOCATION[0][2]&&JUMP[0][1])
assert MISS_JUMP0212 =(LOCATION[0][2]&&JUMP[1][2])
assert MISS_JUMP1222 =(LOCATION[1][2]&&JUMP[2][2])
assert MISS_JUMP1202 =(LOCATION[1][2]&&JUMP[0][2])
assert MISS_JUMP1211 =(LOCATION[1][2]&&JUMP[1][1])
assert MISS_JUMP2221 =(LOCATION[2][2]&&JUMP[2][1])
assert MISS_JUMP2212 =(LOCATION[2][2]&&JUMP[1][2])



ltl_property INVALID_MOVE0010 = []!(MISS_MOVE0010)
ltl_property INVALID_MOVE0001 = []!(MISS_MOVE0001)
ltl_property INVALID_MOVE1020 = []!(MISS_JUMP1020)
ltl_property INVALID_MOVE1011 = []!(MISS_JUMP1011)
ltl_property INVALID_MOVE1000 = []!(MISS_MOVE1000)
ltl_property INVALID_MOVE2021 = []!(MISS_JUMP2021)
ltl_property INVALID_MOVE2010 = []!(MISS_JUMP2010)
ltl_property INVALID_MOVE0102 = []!(MISS_JUMP0102)
ltl_property INVALID_MOVE0111 = []!(MISS_JUMP0111)
ltl_property INVALID_MOVE0100 = []!(MISS_MOVE0100)
ltl_property INVALID_MOVE1112 = []!(MISS_JUMP1112)
ltl_property INVALID_MOVE1101 = []!(MISS_JUMP1101)
ltl_property INVALID_MOVE1121 = []!(MISS_JUMP1121)
ltl_property INVALID_MOVE1110 = []!(MISS_JUMP1110)
ltl_property INVALID_MOVE2122 = []!(MISS_JUMP2122)
ltl_property INVALID_MOVE2112 = []!(MISS_JUMP2112)
ltl_property INVALID_MOVE0201 = []!(MISS_JUMP0201)
ltl_property INVALID_MOVE0212 = []!(MISS_JUMP0212)
ltl_property INVALID_MOVE1222 = []!(MISS_JUMP1222)
ltl_property INVALID_MOVE1202 = []!(MISS_JUMP1202)
ltl_property INVALID_MOVE1211 = []!(MISS_JUMP1211)
ltl_property INVALID_MOVE2221 = []!(MISS_JUMP2221)
ltl_property INVALID_MOVE2212 = []!(MISS_JUMP2212)


fluent OUT =<Out , {Actions}\{Out}>
ltl_property INVALID_ACTION= []!(OUT)


L1 = START,
START = (on->move[0][0]->L[0][0]),
L[0][0] = (navi ->end-> L[0][0]|
		move[1][0]->stop[1][0]-> L[1][0]| 
		jump[1][0]->stop[1][0]-> L[1][0]| 
		move[0][1]->stop[0][1]-> L[0][1]| 
		jump[0][1]->stop[0][1]-> L[0][1]| 
		off -> START),

L[1][0] = (navi ->end-> L[1][0]|
		move[2][0]->stop[2][0]-> L[2][0]| 
		jump[2][0]->stop[2][0]-> L[2][0]| 
		move[1][1]->stop[1][1]-> L[1][1]| 
		jump[1][1]->stop[1][1]-> L[1][1]| 
		move[0][0]->stop[0][0]-> L[0][0]| 
		jump[0][0]->stop[0][0]-> L[0][0]| 
		off -> START),

L[2][0] = (navi ->end-> L[2][0]|
		move[2][1]->stop[2][1]-> L[2][1]| 
		jump[2][1]->stop[2][1]-> L[2][1]| 
		move[1][0]->stop[1][0]-> L[1][0]| 
		jump[1][0]->stop[1][0]-> L[1][0]| 
		off -> START),

L[0][1] = (navi ->end-> L[0][1]|
		move[0][2]->stop[0][2]-> L[0][2]| 
		jump[0][2]->stop[0][2]-> L[0][2]| 
		move[1][1]->stop[1][1]-> L[1][1]| 
		jump[1][1]->stop[1][1]-> L[1][1]| 
		move[0][0]->stop[0][0]-> L[0][0]| 
		jump[0][0]->stop[0][0]-> L[0][0]| 
		off -> START),

L[1][1] = (navi ->end-> L[1][1]|
		move[1][2]->stop[1][2]-> L[1][2]| 
		jump[1][2]->stop[1][2]-> L[1][2]| 
		move[0][1]->stop[0][1]-> L[0][1]| 
		jump[0][1]->stop[0][1]-> L[0][1]| 
		move[2][1]->stop[2][1]-> L[2][1]| 
		jump[2][1]->stop[2][1]-> L[2][1]| 
		move[1][0]->stop[1][0]-> L[1][0]| 
		jump[1][0]->stop[1][0]-> L[1][0]| 
		off -> START),

L[2][1] = (navi ->end-> L[2][1]|
		move[2][2]->stop[2][2]-> L[2][2]| 
		jump[2][2]->stop[2][2]-> L[2][2]| 
		move[1][2]->stop[1][2]-> L[1][2]| 
		jump[1][2]->stop[1][2]-> L[1][2]| 
		off -> START),

L[0][2] = (navi ->end-> L[0][2]|
		move[0][1]->stop[0][1]-> L[0][1]| 
		jump[0][1]->stop[0][1]-> L[0][1]| 
		move[1][2]->stop[1][2]-> L[1][2]| 
		jump[1][2]->stop[1][2]-> L[1][2]| 
		off -> START),

L[1][2] = (navi ->end-> L[1][2]|
		move[2][2]->stop[2][2]-> L[2][2]| 
		jump[2][2]->stop[2][2]-> L[2][2]| 
		move[0][2]->stop[0][2]-> L[0][2]| 
		jump[0][2]->stop[0][2]-> L[0][2]| 
		move[1][1]->stop[1][1]-> L[1][1]| 
		jump[1][1]->stop[1][1]-> L[1][1]| 
		off -> START),

L[2][2] = (navi ->end-> L[2][2]|
		move[2][1]->stop[2][1]-> L[2][1]| 
		jump[2][1]->stop[2][1]-> L[2][1]| 
		move[1][2]->stop[1][2]-> L[1][2]| 
		jump[1][2]->stop[1][2]-> L[1][2]| 
		off -> START),
OUT_CONTROLL = (out -> OUT_CONTROLL).


controllerSpec SPECIFICATION = {
	safety = {INVALID_ACTION,INVALID_MOVE0010,INVALID_MOVE0001,INVALID_MOVE1000,INVALID_MOVE1020,INVALID_MOVE1011,INVALID_MOVE2021,INVALID_MOVE2010,INVALID_MOVE0100,INVALID_MOVE0102,INVALID_MOVE0111,INVALID_MOVE1112,INVALID_MOVE1101,INVALID_MOVE1121,INVALID_MOVE1110,INVALID_MOVE2122,INVALID_MOVE2112,INVALID_MOVE0201,INVALID_MOVE0212,INVALID_MOVE1222,INVALID_MOVE1202,INVALID_MOVE1211,INVALID_MOVE2221,INVALID_MOVE2212}
	assumption ={TURN_ON}
	liveness = {NAVIGATION_GOAL,TURN_OFF}
	controllable = {Controllable}
}

controller ||C = (L1)~{SPECIFICATION}.
