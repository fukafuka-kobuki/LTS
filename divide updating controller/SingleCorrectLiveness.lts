const MaxX = 2
const MaxY = 1
const MaxTime = 10

const RestX = MaxX + 1
const RestY = MaxY + 1

range X = 0..MaxX
range Y = 0..MaxY
range Times = 0..MaxTime

set Direction = {e,w,n,s}
set MoveAction = {move[Direction]}
set Controllable  = {MoveAction, wait, pick, put, start, end, changeArea}
set ArriveAction = { arriveInduction[Y], arrivePicking[X]}

//COUNT=COUNT[0],
//COUNT[i:Times]=(
//       when(i==MaxTime)arrive[X][Y] -> ERROR
//        |when(i!=MaxTime)arrive[X][Y]->COUNT[i+1]
//        | ArriveAction->COUNT
//).


START = (start -> arrive[1][1] ->STORAGE[1][1]),
STORAGE[x:X][y:Y] = (when (x < MaxX) move['e] -> arrive[x+1][y] -> STORAGE[x+1][y]
					|when (x > 0) move['w] -> arrive[x-1][y]-> STORAGE[x-1][y]
//					|when (x == MaxX) move['e] -> (detect->STORAGE[x][y]|arriveShipping[y]->wait-> SHIPPING[y])
					|when (x == MaxX) move['e] -> arrive[x+1][y]->wait-> STORAGE[x+1][y]
					|when (x == 0) move['w] -> arriveInduction[y]->wait-> INDUCTION[y]
					|when (y < MaxY) move['s] -> arrive[x][y+1]-> STORAGE[x][y+1]
					|when (y > 0) move['n] -> arrive[x][y-1]->STORAGE[x][y-1]
//					|when (y == MaxY) move['s] -> (detect->STORAGE[x][y]|arriveReplenish[x]->wait-> REPLENISH[x])
					|when (y == MaxY) move['s] -> arrive[x][y+1]->wait-> STPRAGE[x][y+1]
					|when (y == 0) move['n] -> arrivePicking[x]->wait-> PICKING[x]
					|pick -> picksucc -> STORAGE[x][y]
					|put -> putsucc -> STORAGE[x][y]
					|end ->reset ->start-> STORAGE[x][y]
//					|getRobot -> STORAGE[x][y]
),
STORAGE[RestX][y:Y] = (
					changeArea -> end ->reset ->START
//					start-> STORAGE[RestX][y]
//					|getRobot -> STORAGE[RestX][y]
),
STORAGE[x:X][RestY] =(
					changeArea ->end ->reset ->START
//					-> STORAGE[x][RestY]
//					|getRobot -> STORAGE[x][RestY]
), 
INDUCTION[y:Y]=(move['e] ->arrive[0][y]-> STORAGE[0][y]
				|end ->reset ->start-> INDUCTION[y]
//					|getRobot -> INDUCTION[y]
),
PICKING[x:X]=(move['s] -> arrive[x][0]-> STORAGE[x][0]
				|end ->reset -> start->PICKING[x]
//					|getRobot -> PICKING[x]
).

AFTER = (start -> startNewSpec -> AFTER1),
AFTER1 = (getRobot -> AFTER1).

//fluent Definition
//about Arrive
fluent ArriveStorage[x:X][y:Y] = <arrive[x][y], MoveAction>
fluent ArriveRestStorage[RestX][y:Y] = <arrive[RestX][y], end>

fluent ArriveInduction[y:Y] = <arriveInduction[y], move['e]>
fluent ArriveInductionforTask[y:Y] = <arriveInduction[y], end>

fluent ArrivePicking[x:X] = <arrivePicking[x], move['s]>
fluent ArrivePickingforTask[x:X] = <arrivePicking[x], end>

//fluent ArriveShipping[y:Y] = <arriveShipping[y], move['w]>
//fluent ArriveReplenish[x:X] = <arriveReplenish[x], move['n]>
fluent ArriveStation = <{arriveInduction[Y],arrivePicking[X],arrive[RestX][Y], arrive[X][RestY]}, arrive[X][Y]>

fluent ArriveInvalidPicking = <ArriveAction\{arrivePicking[2],arriveInduction[1]}, reset>

fluent ArriveEastArea = <arrive[RestX][Y],move['w]>
fluent ArriveSouthArea = <arrive[X][RestY],move['n]>

//variation point
//目的地設定に関するfluent
fluent TaskFlag0 = <arrive[1][1],reset>
fluent TaskFlag1 = <arriveInduction[1], reset>
fluent TaskFlag2 = <arrivePicking[2], reset>
fluent TaskFlag3 = <arrive[RestX][Y], reset>
fluent Finish = <end, reset>
fluent Start = <start, end>

//about pick
fluent Pick = <pick,put>
fluent Put = <put,pick>

//requirement always be needed (not change)
ltl_property RePICK = []((Pick ->X!pick)) //二重pick
ltl_property RePUT = []((Put -> X!put))	//二重put 

//requirement always be needed (maybe change)
ltl_property STATIONALONE = [](ArriveStation -> Pick)//pickせずにstationへ移動

//駅に着くまでってなってるけど、エリア分割すると四方が駅で囲まれているとは限らない→ArriveStationのfluentを変更
ltl_property InvalidMoveW = [](move['e] -> (!X move['w] W (ArriveStation)))
ltl_property InvalidMoveE = [](move['w] -> (!X move['e] W (ArriveStation)))
ltl_property InvalidMoveN = [](move['s] -> (!X move['n] W (ArriveStation)))
ltl_property InvalidMoveS = [](move['n] -> (!X move['s] W (ArriveStation)))


//requirement always be needed (changeable)
//エリア内に訪問しないstationがある場合
ltl_property ArriveInvalidStation = []!arrive[X][RestY]

//場合によってはいらない場合のある要求
//requirement which is needed when robot must pick pod
ltl_property ImidiatePick = [](ArriveStorage[1][1]-> X Pick)
ltl_property InvalidPUT = [](!Put)
//ltl_property InvalidPICK = [](!Pick W ArriveStorage[1][1])

//エリアによって変わる
ltl_property InvalidReturn1 = [](TaskFlag1 -> (!X arriveInduction[1] W (reset)))
ltl_property InvalidReturn2 = [](TaskFlag2 -> (!X arrivePicking[2] W (reset)))
ltl_property InvalidReturn3 = [](TaskFlag3 -> (!X arrive[RestX][Y] W (reset)))



ltl_property InvalidArriveStation = [](!ArriveInvalidPicking)




assert TaskFirst = (TaskFlag0 && Pick)

assert StartTask = Start

//ltl_property Goal1 = ([]Start)



//assert Goal1 = (ArriveStorageforTask[1][1] && Pick)
assert Goal1 = (ArriveStorage[1][1] && Pick)
assert Goal2 = (ArriveInduction[1])
assert Goal3 = (ArrivePicking[2])
assert Goal4 = (ArriveRestStorage[RestX][Y])

controllerSpec KIVASPEC = {
	safety = {	
				RePICK,
				RePUT,
				ImidiatePick,
				InvalidPUT,
				STATIONALONE,
				ArriveInvalidStation,
				InvalidArriveStation
				}
	assumption = {StartTask}
	liveness = {Goal1, Goal2, Goal3,Goal4}
	controllable = {Controllable}
}
controller ||KivaCONT = (START)~{KIVASPEC}.

//||UPDATECONTROLLER = (KivaCONT||ENVforUPDATE||AFTER||MIDDLE).
