const MaxX = 2
const MaxY = 1
const MaxTime = 10

const RestX = MaxX + 1
const RestY = MaxY + 1

const AgentNum = 1

range X = 0..MaxX
range Y = 0..MaxY
range Times = 0..MaxTime
range A = 0..AgentNum

//set AgentNumber = {0,1}
set Agents = {a[AgentNum]}
set MoveAction0 = {a[0].move[X][Y], a[0].moveReplenish[X],a[0].movePicking[X], a[0].moveShipping[Y], a[0].moveInduction[Y]}

set Controllable0  = {MoveAction0, a[0].wait, a[0].pick, a[0].put, start, end}

set MoveAction1 = {a[1].move[X][Y], a[1].moveReplenish[X],a[1].movePicking[X], a[1].moveShipping[Y], a[1].moveInduction[Y]}
set Controllable1  = {MoveAction1, a[1].wait, a[1].pick, a[1].put, start, end}

set ArriveAction = {a[A].arrive[X][Y]}
set Controllable = {Controllable0, Controllable1, ArriveAction}

//set ArriveAction = { arriveInduction[Y], arrivePicking[X]}

//COUNT=COUNT[0],
//COUNT[i:Times]=(
//       when(i==MaxTime)arrive[X][Y] -> ERROR
//        |when(i!=MaxTime)arrive[X][Y]->COUNT[i+1]
//        | ArriveAction->COUNT
//).

ENVforUPDATE = (start -> WAITING),
WAITING = (changeArea -> REMOVING|
			getRobot -> GETTING),
REMOVING = (removeRobot -> startNewSpec -> WAITING),
GETTING = (acceptRobot -> startNewSpec -> WAITING).


START(I = 0) = (start -> INITIAL),
INITIAL = (when (I == 0) ['a[I]].arrive[1][1] -> STORAGE[1][1]
			|when (I ==1) ['a[I]].arrive[1][0] -> STORAGE[1][0]),
STORAGE[x:X][y:Y] = (when (x < MaxX) ['a[I]].move[x+1][y] -> ['a[I]].arrive[x+1][y] -> STORAGE[x+1][y]
					|when (x > 0) ['a[I]].move[x-1][y] -> ['a[I]].arrive[x-1][y]-> STORAGE[x-1][y]
					|when (x == MaxX) ['a[I]].moveShipping[y] -> ['a[I]].arriveShipping[y]->['a[I]].wait-> SHIPPING[y]
					|when (x == 0) ['a[I]].moveInduction[y] -> ['a[I]].arriveInduction[y]->['a[I]].wait-> INDUCTION[y]
					|when (y < MaxY) ['a[I]].move[x][y+1] -> ['a[I]].arrive[x][y+1]-> STORAGE[x][y+1]
					|when (y > 0) ['a[I]].move[x][y-1] -> ['a[I]].arrive[x][y-1]->STORAGE[x][y-1]
					|when (y == MaxY) ['a[I]].moveReplenish[x] -> ['a[I]].arriveReplenish[x]->[I].wait-> REPLENISH[x]
					|when (y == 0) ['a[I]].movePicking[x] -> ['a[I]].arrivePicking[x]->['a[I]].wait-> PICKING[x]
					|['a[I]].pick -> ['a[I]].picksucc -> STORAGE[x][y]
					|['a[I]].put -> ['a[I]].putsucc -> STORAGE[x][y]
					|end ->reset ->START
),
SHIPPING[y:Y] = (['a[I]].move[MaxX][y] -> ['a[I]].arrive[MaxX][y]-> STORAGE[MaxX][y]
				|end ->reset -> START
),
REPLENISH[x:X] =(['a[I]].move[x][MaxY] -> ['a[I]].arrive[x][MaxY]-> STORAGE[x][MaxY]
				|end ->reset -> START
), 
INDUCTION[y:Y]=(['a[I]].move[0][y] -> ['a[I]].arrive[0][y]-> STORAGE[0][y]
				|end ->reset -> START
),
PICKING[x:X]=(['a[I]].move[x][0] -> ['a[I]].arrive[x][0]-> STORAGE[x][0]
				|end ->reset -> start->START
).

||ALL(N = AgentNum)=
	forall [i: 0..N-1]
 	(START(i)).
   

//fluent Definition
//about Arrive
fluent ArriveStorage[a:A][x:X][y:Y] = <['a[a]].arrive[x][y], {['a[a]].move[X][Y],['a[a]].moveShipping[Y],['a[a]].moveInduction[Y],['a[a]].moveReplenish[X],['a[a]].movePicking[X],reset}>//
fluent ArriveInduction[a:A][y:Y] = <['a[a]].arriveInduction[y], {['a[a]].move[X][Y],['a[a]].moveShipping[Y],['a[a]].moveInduction[Y],['a[a]].moveReplenish[X],['a[a]].movePicking[X],reset}>
fluent ArrivePicking[a:A][x:X] = <['a[a]].arrivePicking[x], {['a[a]].move[X][Y],['a[a]].moveShipping[Y],['a[a]].moveInduction[Y],['a[a]].moveReplenish[X],['a[a]].movePicking[X],reset}>
fluent ArriveShipping[a:A][y:Y] = <['a[a]].arriveShipping[y], {['a[a]].move[X][Y],['a[a]].moveShipping[Y],['a[a]].moveInduction[Y],['a[a]].moveReplenish[X],['a[a]].movePicking[X],reset}>
fluent ArriveReplenish[a:A][x:X] = <['a[a]].arriveReplenish[x], {['a[a]].move[X][Y],['a[a]].moveShipping[Y],['a[a]].moveInduction[Y],['a[a]].moveReplenish[X],['a[a]].movePicking[X],reset}>



fluent Finish = <end, reset>
fluent Start = <start, {end,reset}>

//about pick
fluent Pick[a:A] = <['a[a]].pick,{['a[a]].put,reset}>//
fluent Put[a:A] = <['a[a]].put,{['a[a]].pick,reset}>//

//requirement always be needed (not change)
ltl_property RePICK0 = []((Pick[0] ->X! a[0].pick)) //二重pick
ltl_property RePUT0 = []((Put[0] -> X! a[0].put))	//二重put 


//場合によってはいらない場合のある要求
//requirement which is needed when robot must pick pod
ltl_property ImidiatePick0 = [](ArriveStorage[0][1][1]-> X Pick[0])
ltl_property InvalidPUT0 = [](!Put[0])
ltl_property InvalidEnd0 = [](!Finish W Goal04)

assert StartTask = Start
assert Goal01 = (ArriveStorage[0][1][1] && Pick[0])
assert Goal02 = (ArriveInduction[0][1])
assert Goal03 = (ArrivePicking[0][2])
assert Goal04 = (ArriveShipping[0][1])

controllerSpec KIVASPEC0 = {
	safety = {	
				InvalidEnd0 ,
				RePICK0,
				RePUT0,
				InvalidPUT0,
				}
	assumption = {StartTask}
	liveness = {Goal01,Goal02, Goal03,Goal04}

	controllable = {Controllable0}
}
controller ||KivaCONT0 = (START(0))~{KIVASPEC0}.



//requirement always be needed (not change)
ltl_property RePICK1 = []((Pick[1] ->X! ['a[1]].pick)) //二重pick
ltl_property RePUT1 = []((Put[1] -> X! ['a[1]].put))	//二重put 

//場合によってはいらない場合のある要求
//requirement which is needed when robot must pick pod
ltl_property InvalidPUT1 = [](!Put[1])
ltl_property InvalidEnd1 = [](!Finish W Goal14)

assert Goal11 = (ArriveStorage[1][1][0] && Pick[1])
assert Goal12 = (ArriveInduction[1][1])
assert Goal13 = (ArrivePicking[1][0])
assert Goal14 = (ArriveShipping[1][1])


controllerSpec KIVASPEC1 = {
	safety = {	
				InvalidEnd1,
				RePICK1,
				RePUT1,
				InvalidPUT1,
//				STATIONALONE,
				}
	assumption = {StartTask}
	liveness = {Goal11, Goal12, Goal13,Goal14}
	controllable = {Controllable1}
}
controller ||KivaCONT1 = (START(1))~{KIVASPEC1}.

||ALLCONT = (KivaCONT0 || KivaCONT1).


fluent MoveStorage[a:A][x:X][y:Y] = <a[a].move[x][y],{a[a].move[X][Y],a[a].moveShipping[Y],a[a].moveInduction[Y],a[a].moveReplenish[X],a[a].movePicking[X],reset}\{a[a].move[x][y]}>


//ltl_property StopConflict =[]((ArriveStorage[0][0][0] -> ! ArriveStorage[1][0][0]))
ltl_property StopConflict01 = forall[x:X][y:Y][a1:Agents][a2:Agents\{a1}]  ([]([a1].move[x][y] -> ! (ArriveStorage[a2][x][y] || MoveStorage[a2][x][y])))
//ltl_property StopConflict10 = forall[x:X][y:Y]  ([]([1].move[x][y] -> ! (ArriveStorage[0][x][y] || MoveStorage[0][x][y])))


controllerSpec ALLSPEC = {
	safety = {StopConflict01
//		,StopConflict10
	}
	controllable = {Controllable}
}
controller ||AllManager = (ALLCONT)~{ALLSPEC}.


