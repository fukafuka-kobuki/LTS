const MaxX = 4
const MaxY = 4
const MaxTime = 10

const RestX = MaxX + 1
const RestY = MaxY + 1

const AgentNum = 4

range X = 0..MaxX
range Y = 0..MaxY
range Times = 0..MaxTime
range A = 0..AgentNum


set Direction = {e,w,n,s}
set MoveAction0 = {[0].move[Direction]}

set Controllable0  = {MoveAction0, [0].wait, [0].pick, [0].put, start, end}

set MoveAction1 = {[1].move[Direction]}
set Controllable1  = {MoveAction1, [1].wait, [1].pick, [1].put, start, end}

set MoveAction2 = {[2].move[Direction]}
set Controllable2  = {MoveAction2, [2].wait, [2].pick, [2].put, start, end}


//set ArriveAction0 = {[0].arriveReplenish[X], [0].arrivePicking[X], [0].arriveShipping[Y], [0].arriveInduction[Y]}
set Controllable = {Controllable0, Controllable1,MoveAction2}

//set ArriveAction = { arriveInduction[Y], arrivePicking[X]}

ENVforUPDATE = (start -> WAITING),
WAITING = (changeArea -> REMOVING|
			getRobot -> GETTING),
REMOVING = (removeRobot -> startNewSpec -> WAITING),
GETTING = (acceptRobot -> startNewSpec -> WAITING).


//START(I = 0) = (start -> INITIAL),
INITIAL(I = 0) = (when (I == 0) [I].arrive[1][1]->start -> STORAGE[1][1]
			|when (I ==1) [I].arrive[1][0] ->start-> STORAGE[1][0]
			|when (I ==2) [I].arrive[0][0] ->start-> STORAGE[0][0]
			|when (I ==3) [I].arrive[0][1] ->start-> STORAGE[0][1]
),
STORAGE[x:X][y:Y] = (when (x < MaxX) [I].move['e] -> [I].arrive[x+1][y] -> STORAGE[x+1][y]
					|when (x > 0) [I].move['w] -> [I].arrive[x-1][y]-> STORAGE[x-1][y]
					|when (x == MaxX) [I].move['e] -> [I].arriveShipping[y]->[I].wait-> SHIPPING[y]
					|when (x == 0) [I].move['w] -> [I].arriveInduction[y]->[I].wait-> INDUCTION[y]
					|when (y < MaxY) [I].move['s] -> [I].arrive[x][y+1]-> STORAGE[x][y+1]
					|when (y > 0) [I].move['n] -> [I].arrive[x][y-1]->STORAGE[x][y-1]
					|when (y == MaxY) [I].move['s] -> [I].arriveReplenish[x]->[I].wait-> REPLENISH[x]
					|when (y == 0) [I].move['n] -> [I].arrivePicking[x]->[I].wait-> PICKING[x]
					|[I].pick -> [I].picksucc -> STORAGE[x][y]
					|[I].put -> [I].putsucc -> STORAGE[x][y]
					|end ->reset ->INITIAL
),
SHIPPING[y:Y] = ([I].move['w] -> [I].arrive[MaxX][y]-> STORAGE[MaxX][y]
				|end ->reset -> INITIAL
),
REPLENISH[x:X] =([I].move['n] -> [I].arrive[x][MaxY]-> STORAGE[x][MaxY]
				|end ->reset -> INITIAL
), 
INDUCTION[y:Y]=([I].move['e] -> [I].arrive[0][y]-> STORAGE[0][y]
				|end ->reset -> INITIAL
),
PICKING[x:X]=([I].move['s] -> [I].arrive[x][0]-> STORAGE[x][0]
				|end ->reset -> start->INITIAL
).

||ALL(N = AgentNum)=
	forall [i: 0..N]
 	(INITIAL(i)).
   

//fluent Definition
//about Arrive
fluent ArriveStorage[a:A][x:X][y:Y] = <[a].arrive[x][y], {[a].move[Direction], reset}>//
fluent ArriveInduction[a:A][y:Y] = <[a].arriveInduction[y], {[a].move['e],reset}>
fluent ArrivePicking[a:A][x:X] = <[a].arrivePicking[x], {[a].move['s],reset}>
fluent ArriveShipping[a:A][y:Y] = <[a].arriveShipping[y], {[a].move['w],reset}>
fluent ArriveReplenish[a:A][x:X] = <[a].arriveReplenish[x], {[a].move['n],reset}>

fluent ArriveStation[a:A] = <{[a].arriveReplenish[X],[a].arriveShipping[Y],[a].arriveInduction[Y],[a].arrivePicking[X]}, {[a].arrive[X][Y],reset}>

fluent INVALID_STATION0[a:A] = <{[a].arriveReplenish[X],[a].arriveShipping[Y],[a].arriveInduction[Y],[a].arrivePicking[X]}\{[a].arriveShipping[1],[a].arriveInduction[1],[a].arrivePicking[1]}, {[a].arrive[X][Y],reset}>

fluent Finish = <end, reset>
fluent Start = <start, {end,reset}>

//about pick
fluent Pick[a:A] = <[a].pick,{[a].put,reset}>//
fluent Put[a:A] = <[a].put,{[a].pick,reset}>//

//requirement always be needed (not change)
ltl_property RePICK0 = []((Pick[0] ->X! [0].pick)) //二重pick
ltl_property RePUT0 = []((Put[0] -> X! [0].put))	//二重put 


//場合によってはいらない場合のある要求
//requirement which is needed when robot must pick pod
ltl_property ImidiatePick0 = [](ArriveStorage[0][1][1]-> X Pick[0])
ltl_property InvalidPUT0 = [](!Put[0])
ltl_property InvalidEnd0 = [](!Finish W Goal04)

ltl_property InvalidMoveW = []([0].move['e] -> (!X [0].move['w] W (ArriveStation[0])))
ltl_property InvalidMoveE = []([0].move['w] -> (!X [0].move['e] W (ArriveStation[0])))
ltl_property InvalidMoveN = []([0].move['s] -> (!X [0].move['n] W (ArriveStation[0])))
ltl_property InvalidMoveS = []([0].move['n] -> (!X [0].move['s] W (ArriveStation[0])))

ltl_property InvalidArriveStation = []!(INVALID_STATION0[0])



fluent TaskFlag0 = <[0].arrive[1][1],reset>
fluent FlagforTask1 = <[0].arriveInduction[1], reset>
fluent FlagforTask2 = <[0].arrivePicking[1], reset>
fluent FlagforTask3 = <[0].arriveShipping[1], reset>

ltl_property InvalidReturn1 = [](FlagforTask1 -> (!X [0].arriveInduction[1] W (reset)))
ltl_property InvalidReturn2 = [](FlagforTask2 -> (!X [0].arrivePicking[1] W (reset)))
ltl_property InvalidReturn3 = [](FlagforTask3 -> (!X [0].arriveShipping[1] W (reset)))


assert TaskFirst = (TaskFlag0 && Pick[0])

//ltl_property GOAL01 = [] ((ArriveStorage[0][1][1] && [0].pick) -> start)
ltl_property GOAL02 = [] (!(ArriveInduction[0][1]) W (TaskFirst))
ltl_property GOAL03 = [] (!(ArrivePicking[0][1]) W (FlagforTask1))
ltl_property GOAL04 = [] (!(ArriveShipping[0][1]) W (FlagforTask2))


assert StartTask = Start
assert Goal01 = (ArriveStorage[0][1][1] && Pick[0])
assert Goal02 = (ArriveInduction[0][1])
assert Goal03 = (ArrivePicking[0][1])
assert Goal04 = (ArriveShipping[0][1])
assert Goal05 =  Finish

//ltl_property VisitDestination= [](ArriveInduction[0][1] && <> (ArrivePicking[0][1]) && <>(ArriveShipping[0][1]))

ltl_property VisitDest = [](start -> (X<>ArriveInduction[0][1]))
// && (<> ArrivePicking[0][1]) && (<>ArriveShipping[0][1]))


controllerSpec KIVASPEC0 = {
	safety = {	
				InvalidEnd0 ,
				RePICK0,
				RePUT0,
				InvalidPUT0,
				ImidiatePick0,
//				InvalidMoveW,
//				InvalidMoveE,
//				InvalidMoveS,
//				InvalidMoveN,
				InvalidReturn1, 
				InvalidReturn2, 
				InvalidReturn3, 
				InvalidArriveStation,
//				GOAL01,
				GOAL02,
				GOAL03,
				GOAL04,
//				VisitDestination
//				VisitDest
				}

	assumption = {StartTask}
	liveness = {Goal05}
//	liveness = {VisitDest}
	controllable = {Controllable0}
}
controller ||KivaCONT0 = (INITIAL(0))~{KIVASPEC0}.



//requirement always be needed (not change)
ltl_property RePICK1 = []((Pick[1] ->X! [1].pick)) //二重pick
ltl_property RePUT1 = []((Put[1] -> X! [1].put))	//二重put 

//場合によってはいらない場合のある要求
//requirement which is needed when robot must pick pod
ltl_property InvalidPUT1 = [](!Put[1])
ltl_property InvalidEnd1 = [](!Finish W Goal14)
ltl_property ImidiatePick1 = [](ArriveStorage[1][1][0]-> X Pick[1])

ltl_property InvalidMoveW1 = []([1].move['e] -> (!X [1].move['w] W (ArriveStation[1])))
ltl_property InvalidMoveE1 = []([1].move['w] -> (!X [1].move['e] W (ArriveStation[1])))
ltl_property InvalidMoveN1 = []([1].move['s] -> (!X [1].move['n] W (ArriveStation[1])))
ltl_property InvalidMoveS1 = []([1].move['n] -> (!X [1].move['s] W (ArriveStation[1])))

fluent INVALID_STATION1[a:A] = <{[a].arriveReplenish[X],[a].arriveShipping[Y],[a].arriveInduction[Y],[a].arrivePicking[X]}\{[a].arriveShipping[0],[a].arriveInduction[1],[a].arrivePicking[1]}, {[a].arrive[X][Y],reset}>
ltl_property InvalidArriveStation1 = []!(INVALID_STATION1[1])



fluent TaskFlag10 = <[1].arrive[1][0],reset>
fluent FlagforTask11 = <[1].arriveInduction[1], reset>
fluent FlagforTask12 = <[1].arrivePicking[1], reset>
fluent FlagforTask13 = <[1].arriveShipping[0], reset>

ltl_property InvalidReturn11 = [](FlagforTask11 -> (!X [1].arriveInduction[1] W (reset)))
ltl_property InvalidReturn12 = [](FlagforTask12 -> (!X [1].arrivePicking[1] W (reset)))
ltl_property InvalidReturn13 = [](FlagforTask13 -> (!X [1].arriveShipping[0] W (reset)))


assert TaskFirst1 = (TaskFlag10 && Pick[1])

//ltl_property GOAL01 = [] ((ArriveStorage[0][1][1] && [0].pick) -> start)
ltl_property GOAL12 = [] (!(ArriveInduction[1][1]) W (TaskFirst1))
ltl_property GOAL13 = [] (!(ArrivePicking[1][1]) W (FlagforTask11))
ltl_property GOAL14 = [] (!(ArriveShipping[1][0]) W (FlagforTask12))


assert Goal11 = (ArriveStorage[1][1][0] && Pick[1])
assert Goal12 = (ArriveInduction[1][1])
assert Goal13 = (ArrivePicking[1][1])
assert Goal14 = (ArriveShipping[1][0])


controllerSpec KIVASPEC1 = {
	safety = {	
				InvalidEnd1,
				RePICK1,
				RePUT1,
				InvalidPUT1,
//				STATIONALONE,
				ImidiatePick1,
//				InvalidMoveW1,
//				InvalidMoveE1,
//				InvalidMoveS1,
//				InvalidMoveN1,
				InvalidReturn11, 
				InvalidReturn12, 
				InvalidReturn13, 
				InvalidArriveStation1,
//				GOAL01,
				GOAL12,
				GOAL13,
				GOAL14

				}
	assumption = {StartTask}
	liveness = {Goal05}
	controllable = {Controllable1}
}
controller ||KivaCONT1 = (INITIAL(1))~{KIVASPEC1}.


//requirement always be needed (not change)
ltl_property RePICK2 = []((Pick[2] ->X! [2].pick)) //二重pick
ltl_property RePUT2 = []((Put[2] -> X! [2].put))	//二重put 

//場合によってはいらない場合のある要求
//requirement which is needed when robot must pick pod
ltl_property InvalidPUT2 = [](!Put[2])
ltl_property InvalidEnd2 = [](!Finish W Goal24)
ltl_property ImidiatePick2 = [](ArriveStorage[2][0][0]-> X Pick[2])

ltl_property InvalidMoveW2 = []([2].move['e] -> (!X [2].move['w] W (ArriveStation[2])))
ltl_property InvalidMoveE2 = []([2].move['w] -> (!X [2].move['e] W (ArriveStation[2])))
ltl_property InvalidMoveN2 = []([2].move['s] -> (!X [2].move['n] W (ArriveStation[2])))
ltl_property InvalidMoveS2 = []([2].move['n] -> (!X [2].move['s] W (ArriveStation[2])))

fluent INVALID_STATION2[a:A] = <{[a].arriveReplenish[X],[a].arriveShipping[Y],[a].arriveInduction[Y],[a].arrivePicking[X]}\{[a].arriveShipping[0],[a].arriveInduction[1],[a].arrivePicking[0]}, {[a].arrive[X][Y],reset}>
ltl_property InvalidArriveStation2 = []!(INVALID_STATION2[2])



fluent TaskFlag20 = <[2].arrive[0][0],reset>
fluent FlagforTask21 = <[2].arriveInduction[1], reset>
fluent FlagforTask22 = <[2].arrivePicking[0], reset>
fluent FlagforTask23 = <[2].arriveShipping[0], reset>

ltl_property InvalidReturn21 = [](FlagforTask21 -> (!X [2].arriveInduction[1] W (reset)))
ltl_property InvalidReturn22 = [](FlagforTask22 -> (!X [2].arrivePicking[0] W (reset)))
ltl_property InvalidReturn23 = [](FlagforTask23 -> (!X [2].arriveShipping[0] W (reset)))


assert TaskFirst2 = (TaskFlag20 && Pick[2])

//ltl_property GOAL01 = [] ((ArriveStorage[0][1][1] && [0].pick) -> start)
ltl_property GOAL22 = [] (!(ArriveInduction[2][1]) W (TaskFirst2))
ltl_property GOAL23 = [] (!(ArrivePicking[2][0]) W (FlagforTask21))
ltl_property GOAL24 = [] (!(ArriveShipping[2][0]) W (FlagforTask22))


assert Goal21 = (ArriveStorage[2][0][0] && Pick[2])
assert Goal22 = (ArriveInduction[2][1])
assert Goal23 = (ArrivePicking[2][0])
assert Goal24 = (ArriveShipping[2][0])


controllerSpec KIVASPEC2 = {
	safety = {	
				InvalidEnd2,
				RePICK2,
				RePUT2,
				InvalidPUT2,
				ImidiatePick2,
				InvalidReturn21, 
				InvalidReturn22, 
				InvalidReturn23, 
				InvalidArriveStation2,
				GOAL22,
				GOAL23,
				GOAL24

				}
	assumption = {StartTask}
	liveness = {Goal05}
	controllable = {Controllable2}
}
controller ||KivaCONT2 = (INITIAL(2))~{KIVASPEC2}.




set MoveAction3 = {[3].move[Direction]}
set Controllable3 = {MoveAction3, [3].wait, [3].pick, [3].put, start, end}
ltl_property RePICK3 = []((Pick[3] ->X! [3].pick)) //二重pick
ltl_property RePUT3 = []((Put[3] -> X! [3].put))	//二重put
ltl_property InvalidPUT3 = [](!Put[3])
ltl_property InvalidEnd3 = [](!Finish W Goal34)
ltl_property ImidiatePick3 = [](ArriveStorage[3][0][1]-> X Pick[3])
ltl_property InvalidMoveW3 = []([3].move['e] -> (!X [3].move['w] W (ArriveStation[3])))
ltl_property InvalidMoveE3 = []([3].move['w] -> (!X [3].move['e] W (ArriveStation[3])))
ltl_property InvalidMoveN3 = []([3].move['s] -> (!X [3].move['n] W (ArriveStation[3])))
ltl_property InvalidMoveS3 = []([3].move['n] -> (!X [3].move['s] W (ArriveStation[3])))

fluent INVALID_STATION3[a:A] = <{[a].arriveReplenish[X],[a].arriveShipping[Y],[a].arriveInduction[Y],[a].arrivePicking[X]}\{[a].arriveShipping[1],[a].arriveInduction[1],[a].arrivePicking[0]}, {[a].arrive[X][Y],reset}>
ltl_property InvalidArriveStation3 = []!(INVALID_STATION3[3])

fluent TaskFlag30 = <[3].arrive[0][1],reset>
fluent FlagforTask31 = <[3].arriveInduction[1], reset>
fluent FlagforTask32 = <[3].arrivePicking[0], reset>
fluent FlagforTask33 = <[3].arriveShipping[1], reset>

ltl_property InvalidReturn31 = [](FlagforTask31 -> (!X [3].arriveInduction[0] W (reset)))
ltl_property InvalidReturn32 = [](FlagforTask32 -> (!X [3].arrivePicking[3] W (reset)))
ltl_property InvalidReturn33 = [](FlagforTask33 -> (!X [3].arriveShipping[1] W (reset)))
assert TaskFirst3 = (TaskFlag30 && Pick[3])
ltl_property GOAL32 = [] (!(ArriveInduction[3][1]) W (TaskFirst3))
ltl_property GOAL33 = [] (!(ArrivePicking[3][0]) W (FlagforTask31))
ltl_property GOAL34 = [] (!(ArriveShipping[3][1]) W (FlagforTask32))

assert Goal31 = (ArriveStorage[3][0][1] && Pick[3])
assert Goal32 = (ArriveInduction[3][1])
assert Goal33 = (ArrivePicking[3][0])
assert Goal34 = (ArriveShipping[3][1])

controllerSpec KIVASPEC3 = {
safety = {	
InvalidEnd3,
RePICK3,
RePUT3,InvalidPUT3,ImidiatePick3,InvalidReturn31, InvalidReturn32, InvalidReturn33, InvalidArriveStation3,GOAL32,GOAL33,GOAL34}
assumption = {StartTask}
liveness = {Goal05}
controllable = {Controllable3}}
controller ||KivaCONT3 = (INITIAL(3))~{KIVASPEC3}.







//ltl_property StopConflict =[] forall[x:X][y:Y]!((ArriveStorage[0][x][y] && ArriveStorage[1][x][y]))
ltl_property StopConflict010T0 =[]!((ArriveStorage[0][0][0]&& ArriveStorage[1][0][0]))
ltl_property StopConflict020T0 =[]!((ArriveStorage[0][0][0]&& ArriveStorage[2][0][0]))
ltl_property StopConflict120T0 =[]!((ArriveStorage[1][0][0]&& ArriveStorage[2][0][0]))
ltl_property StopConflict010T1 =[]!((ArriveStorage[0][0][1]&& ArriveStorage[1][0][1]))
ltl_property StopConflict020T1 =[]!((ArriveStorage[0][0][1]&& ArriveStorage[2][0][1]))
ltl_property StopConflict120T1 =[]!((ArriveStorage[1][0][1]&& ArriveStorage[2][0][1]))
ltl_property StopConflict010T2 =[]!((ArriveStorage[0][0][2]&& ArriveStorage[1][0][2]))
ltl_property StopConflict020T2 =[]!((ArriveStorage[0][0][2]&& ArriveStorage[2][0][2]))
ltl_property StopConflict120T2 =[]!((ArriveStorage[1][0][2]&& ArriveStorage[2][0][2]))
ltl_property StopConflict010T3 =[]!((ArriveStorage[0][0][3]&& ArriveStorage[1][0][3]))
ltl_property StopConflict020T3 =[]!((ArriveStorage[0][0][3]&& ArriveStorage[2][0][3]))
ltl_property StopConflict120T3 =[]!((ArriveStorage[1][0][3]&& ArriveStorage[2][0][3]))
ltl_property StopConflict010T4 =[]!((ArriveStorage[0][0][4]&& ArriveStorage[1][0][4]))
ltl_property StopConflict020T4 =[]!((ArriveStorage[0][0][4]&& ArriveStorage[2][0][4]))
ltl_property StopConflict120T4 =[]!((ArriveStorage[1][0][4]&& ArriveStorage[2][0][4]))
ltl_property StopConflict011T0 =[]!((ArriveStorage[0][1][0]&& ArriveStorage[1][1][0]))
ltl_property StopConflict021T0 =[]!((ArriveStorage[0][1][0]&& ArriveStorage[2][1][0]))
ltl_property StopConflict121T0 =[]!((ArriveStorage[1][1][0]&& ArriveStorage[2][1][0]))
ltl_property StopConflict011T1 =[]!((ArriveStorage[0][1][1]&& ArriveStorage[1][1][1]))
ltl_property StopConflict021T1 =[]!((ArriveStorage[0][1][1]&& ArriveStorage[2][1][1]))
ltl_property StopConflict121T1 =[]!((ArriveStorage[1][1][1]&& ArriveStorage[2][1][1]))
ltl_property StopConflict011T2 =[]!((ArriveStorage[0][1][2]&& ArriveStorage[1][1][2]))
ltl_property StopConflict021T2 =[]!((ArriveStorage[0][1][2]&& ArriveStorage[2][1][2]))
ltl_property StopConflict121T2 =[]!((ArriveStorage[1][1][2]&& ArriveStorage[2][1][2]))
ltl_property StopConflict011T3 =[]!((ArriveStorage[0][1][3]&& ArriveStorage[1][1][3]))
ltl_property StopConflict021T3 =[]!((ArriveStorage[0][1][3]&& ArriveStorage[2][1][3]))
ltl_property StopConflict121T3 =[]!((ArriveStorage[1][1][3]&& ArriveStorage[2][1][3]))
ltl_property StopConflict011T4 =[]!((ArriveStorage[0][1][4]&& ArriveStorage[1][1][4]))
ltl_property StopConflict021T4 =[]!((ArriveStorage[0][1][4]&& ArriveStorage[2][1][4]))
ltl_property StopConflict121T4 =[]!((ArriveStorage[1][1][4]&& ArriveStorage[2][1][4]))
ltl_property StopConflict012T0 =[]!((ArriveStorage[0][2][0]&& ArriveStorage[1][2][0]))
ltl_property StopConflict022T0 =[]!((ArriveStorage[0][2][0]&& ArriveStorage[2][2][0]))
ltl_property StopConflict122T0 =[]!((ArriveStorage[1][2][0]&& ArriveStorage[2][2][0]))
ltl_property StopConflict012T1 =[]!((ArriveStorage[0][2][1]&& ArriveStorage[1][2][1]))
ltl_property StopConflict022T1 =[]!((ArriveStorage[0][2][1]&& ArriveStorage[2][2][1]))
ltl_property StopConflict122T1 =[]!((ArriveStorage[1][2][1]&& ArriveStorage[2][2][1]))
ltl_property StopConflict012T2 =[]!((ArriveStorage[0][2][2]&& ArriveStorage[1][2][2]))
ltl_property StopConflict022T2 =[]!((ArriveStorage[0][2][2]&& ArriveStorage[2][2][2]))
ltl_property StopConflict122T2 =[]!((ArriveStorage[1][2][2]&& ArriveStorage[2][2][2]))
ltl_property StopConflict012T3 =[]!((ArriveStorage[0][2][3]&& ArriveStorage[1][2][3]))
ltl_property StopConflict022T3 =[]!((ArriveStorage[0][2][3]&& ArriveStorage[2][2][3]))
ltl_property StopConflict122T3 =[]!((ArriveStorage[1][2][3]&& ArriveStorage[2][2][3]))
ltl_property StopConflict012T4 =[]!((ArriveStorage[0][2][4]&& ArriveStorage[1][2][4]))
ltl_property StopConflict022T4 =[]!((ArriveStorage[0][2][4]&& ArriveStorage[2][2][4]))
ltl_property StopConflict122T4 =[]!((ArriveStorage[1][2][4]&& ArriveStorage[2][2][4]))
ltl_property StopConflict013T0 =[]!((ArriveStorage[0][3][0]&& ArriveStorage[1][3][0]))
ltl_property StopConflict023T0 =[]!((ArriveStorage[0][3][0]&& ArriveStorage[2][3][0]))
ltl_property StopConflict123T0 =[]!((ArriveStorage[1][3][0]&& ArriveStorage[2][3][0]))
ltl_property StopConflict013T1 =[]!((ArriveStorage[0][3][1]&& ArriveStorage[1][3][1]))
ltl_property StopConflict023T1 =[]!((ArriveStorage[0][3][1]&& ArriveStorage[2][3][1]))
ltl_property StopConflict123T1 =[]!((ArriveStorage[1][3][1]&& ArriveStorage[2][3][1]))
ltl_property StopConflict013T2 =[]!((ArriveStorage[0][3][2]&& ArriveStorage[1][3][2]))
ltl_property StopConflict023T2 =[]!((ArriveStorage[0][3][2]&& ArriveStorage[2][3][2]))
ltl_property StopConflict123T2 =[]!((ArriveStorage[1][3][2]&& ArriveStorage[2][3][2]))
ltl_property StopConflict013T3 =[]!((ArriveStorage[0][3][3]&& ArriveStorage[1][3][3]))
ltl_property StopConflict023T3 =[]!((ArriveStorage[0][3][3]&& ArriveStorage[2][3][3]))
ltl_property StopConflict123T3 =[]!((ArriveStorage[1][3][3]&& ArriveStorage[2][3][3]))
ltl_property StopConflict013T4 =[]!((ArriveStorage[0][3][4]&& ArriveStorage[1][3][4]))
ltl_property StopConflict023T4 =[]!((ArriveStorage[0][3][4]&& ArriveStorage[2][3][4]))
ltl_property StopConflict123T4 =[]!((ArriveStorage[1][3][4]&& ArriveStorage[2][3][4]))
ltl_property StopConflict014T0 =[]!((ArriveStorage[0][4][0]&& ArriveStorage[1][4][0]))
ltl_property StopConflict024T0 =[]!((ArriveStorage[0][4][0]&& ArriveStorage[2][4][0]))
ltl_property StopConflict124T0 =[]!((ArriveStorage[1][4][0]&& ArriveStorage[2][4][0]))
ltl_property StopConflict014T1 =[]!((ArriveStorage[0][4][1]&& ArriveStorage[1][4][1]))
ltl_property StopConflict024T1 =[]!((ArriveStorage[0][4][1]&& ArriveStorage[2][4][1]))
ltl_property StopConflict124T1 =[]!((ArriveStorage[1][4][1]&& ArriveStorage[2][4][1]))
ltl_property StopConflict014T2 =[]!((ArriveStorage[0][4][2]&& ArriveStorage[1][4][2]))
ltl_property StopConflict024T2 =[]!((ArriveStorage[0][4][2]&& ArriveStorage[2][4][2]))
ltl_property StopConflict124T2 =[]!((ArriveStorage[1][4][2]&& ArriveStorage[2][4][2]))
ltl_property StopConflict014T3 =[]!((ArriveStorage[0][4][3]&& ArriveStorage[1][4][3]))
ltl_property StopConflict024T3 =[]!((ArriveStorage[0][4][3]&& ArriveStorage[2][4][3]))
ltl_property StopConflict124T3 =[]!((ArriveStorage[1][4][3]&& ArriveStorage[2][4][3]))
ltl_property StopConflict014T4 =[]!((ArriveStorage[0][4][4]&& ArriveStorage[1][4][4]))
ltl_property StopConflict024T4 =[]!((ArriveStorage[0][4][4]&& ArriveStorage[2][4][4]))
ltl_property StopConflict124T4 =[]!((ArriveStorage[1][4][4]&& ArriveStorage[2][4][4]))



//ltl_property StopConflict =  []!([0].move[Direction] && X [0].arrive[0][0] W )

controllerSpec ALLNaiveSPEC = {
	safety = {
				InvalidEnd0 ,
				RePICK0,
				RePUT0,
				InvalidPUT0,
				ImidiatePick0,
				InvalidReturn1, 
				InvalidReturn2, 
				InvalidReturn3, 
				InvalidArriveStation,
//				GOAL01,
				GOAL02,
				GOAL03,
				GOAL04,
				InvalidEnd1,
				RePICK1,
				RePUT1,
				InvalidPUT1,
//				STATIONALONE,
				ImidiatePick1,
				InvalidReturn11, 
				InvalidReturn12, 
				InvalidReturn13, 
				InvalidArriveStation1,
//				GOAL01,
				GOAL12,
				GOAL13,
				GOAL14,
StopConflict0T0,StopConflict0T1,
StopConflict1T0,StopConflict1T1
}
	assumption = {StartTask}
	liveness = {Goal05}

//	liveness = {Goal01,Goal11, Goal02, Goal03,Goal04, Goal12, Goal13,Goal14}
	controllable = {Controllable}
}
controller ||AllNaiveManager = (ALL)~{ALLNaiveSPEC}.

||ALLCONT = (KivaCONT0 || KivaCONT1|| KivaCONT2||KivaCONT3).

controllerSpec ALLSPEC = {
	safety = {
StopConflict010T0,StopConflict020T0,StopConflict120T0,
StopConflict010T1,StopConflict020T1,StopConflict120T1,
StopConflict010T2,StopConflict020T2,StopConflict120T2,
StopConflict010T3,StopConflict020T3,StopConflict120T3,
StopConflict010T4,StopConflict020T4,StopConflict120T4,
StopConflict011T0,StopConflict021T0,StopConflict121T0,
StopConflict011T1,StopConflict021T1,StopConflict121T1,
StopConflict011T2,StopConflict021T2,StopConflict121T2,
StopConflict011T3,StopConflict021T3,StopConflict121T3,
StopConflict011T4,StopConflict021T4,StopConflict121T4,
StopConflict012T0,StopConflict022T0,StopConflict122T0,
StopConflict012T1,StopConflict022T1,StopConflict122T1,
StopConflict012T2,StopConflict022T2,StopConflict122T2,
StopConflict012T3,StopConflict022T3,StopConflict122T3,
StopConflict012T4,StopConflict022T4,StopConflict122T4,
StopConflict013T0,StopConflict023T0,StopConflict123T0,
StopConflict013T1,StopConflict023T1,StopConflict123T1,
StopConflict013T2,StopConflict023T2,StopConflict123T2,
StopConflict013T3,StopConflict023T3,StopConflict123T3,
StopConflict013T4,StopConflict023T4,StopConflict123T4,
StopConflict014T0,StopConflict024T0,StopConflict124T0,
StopConflict014T1,StopConflict024T1,StopConflict124T1,
StopConflict014T2,StopConflict024T2,StopConflict124T2,
StopConflict014T3,StopConflict024T3,StopConflict124T3,
StopConflict014T4,StopConflict024T4,StopConflict124T4


		}
	controllable = {Controllable}
}
controller ||AllManager = (ALLCONT)~{ALLSPEC}.


