const X_MAX = 2
const Y_MAX = 2
range X = 0..X_MAX
range Y = 0..Y_MAX

const X_MAXf = 2
const Y_MAXf = 2
range Xf = 0..X_MAXf
range Yf = 0..Y_MAXf

set FlagAction = {stop[X][Y]}
set FlagActionf = {stopf[Xf][Yf]}

set StairControllable = {enterstair, outstair,moveright, moveleft, up,down}
set FloorControllable = {enterstair, outstair,floorinit,moverightf, moveleftf, movefront,moveback}


fluent OUT = <floorinit, outstair>
fluent ENTER = <enterstair, outstair>
//fluent LOCATION[x:X][y:Y]=<{stop[x][y]},{FlagAction}\{stop[x][y]}>
fluent CLEANACHIEVE[x:X][y:Y]=<stop[x][y],outstair> 
fluent CLEANACHIEVEF[a:Xf][b:Yf]=<stopf[a][b],floorinit>

assert ENTERS = ENTER
assert OUTS = OUT
//assert CLEAN_ACHIEVE = (CLEANACHIEVE[0][2])

assert CLEAN_ACHIEVE = (CLEANACHIEVE[0][2]&&CLEANACHIEVE[1][2]&&CLEANACHIEVE[2][2]&&CLEANACHIEVE[0][1]&&CLEANACHIEVE[1][1]&&CLEANACHIEVE[2][1]&&CLEANACHIEVE[0][0]&&CLEANACHIEVE[1][0]&&CLEANACHIEVE[2][0]&&CLEANACHIEVEF[0][2]&&CLEANACHIEVEF[1][2]&&CLEANACHIEVEF[2][2]&&CLEANACHIEVEF[0][1]&&CLEANACHIEVEF[1][1]&&CLEANACHIEVEF[2][1]&&CLEANACHIEVEF[0][0]&&CLEANACHIEVEF[1][0]&&CLEANACHIEVEF[2][0])

//assert CLEAN_ACHIEVEF = (CLEANACHIEVEF[1][2])

//fluent for stair
fluent Down = <down,{StairControllable}\{down}>
fluent RIGHT = <reachright,{moveleft}>
fluent LEFT = <reachleft , moveright>
fluent MoveRight = <moveright, reachright>
fluent MoveLeft = <moveleft, reachleft>
fluent CLEAN_RIGHT = <reachright,{down}>
fluent CLEAN_LEFT = <reachleft , {down}>
fluent EnterS = <enterstair, {StairControllable}\{enterstair}>
fluent Invalid = <up, StairControllable\{up}>


//fluent for floor
fluent Change = <movefront,{FloorControllable}\{movefront}>
fluent RIGHTF = <reachrightf,moveleftf>
fluent LEFTF = <reachleftf,moverightf>
fluent MoveRightF = <moverightf, reachrightf>
fluent MoveLeftF = <moveleftf, reachleftf>
fluent CLEAN_RIGHTF = <reachrightf,{movefront}>
fluent CLEAN_LEFTF = <reachleftf,{movefront}>
fluent EnterF = <floorinit, {FloorControllable}\{floorinit}>
fluent InvalidF = <moveback, {FloorControllable}\{moveback}>



//assertion for stair
assert ENTER = EnterS
assert DOWN = Down
assert DOWNS = (Down||EnterS)
assert SWEEP_COMPLETE = (CLEAN_RIGHT && CLEAN_LEFT)
assert SWEEP_RIGHT = CLEAN_RIGHT
assert SWEEP_LEFT = CLEAN_LEFT


//assertion for floor

assert ENTERF = EnterF
assert CHANGELINE = Change
assert CHANGEF = (Change||EnterF)
assert SWEEP_COMPLETEF = (CLEAN_RIGHTF && CLEAN_LEFTF)
assert SWEEP_RIGHTF = CLEAN_RIGHTF
assert SWEEP_LEFTF = CLEAN_LEFTF


//safety goal for STAIR
//ltl_property ChangeStair = [](!DOWN U SWEEP_COMPLETE) 
ltl_property DuplicateDown = [](DOWNS -> X !DOWNS)
ltl_property CLEAN = [](MoveRight ->(!DOWN W SWEEP_LEFT))
//ltl_property CLEAN = [](RIGHT -> !DOWN)
ltl_property ChangeStair = [](SWEEP_COMPLETE -> X DOWN)
ltl_property ConstRight = [](MoveRight -> (!MoveLeft W RIGHT))
ltl_property ConstLeft = [](MoveLeft -> (!MoveRight W LEFT))
ltl_property RL = [](MoveRight -> (!LEFT W MoveLeft))
ltl_property RR = [](MoveLeft -> (!RIGHT W MoveRight))
ltl_property INVALID  = [](!Invalid)


//safety goal for FLOOR
ltl_property DuplicateChangeLine = [](CHANGEF -> X !CHANGEF)
//ltl_property CLEAN_FLOOR = [](RIGHTF ->X !CHANGELINE)
ltl_property CLEAN_FLOOR = [](MoveRightF ->(!CHANGELINE W SWEEP_LEFTF))
ltl_property ChangeLine = [](SWEEP_COMPLETEF -> X CHANGELINE)
ltl_property ConstRightF = [](MoveRightF -> (!MoveLeftF W RIGHTF))
ltl_property ConstLeftF = [](MoveLeftF -> (!MoveRightF W LEFTF))
ltl_property RLF = [](MoveRightF -> (!LEFTF W MoveLeftF))
ltl_property RRF = [](MoveLeftF -> (!RIGHTF W MoveRightF))
ltl_property INVALIDF  = [](!InvalidF)










L1 = STAIR,
STAIR = (enterstair->L[0][11]),
L[0][11] = (
		moveright-> L[1][11]|
		moveleft->reachleft->L[0][11]|
		down  -> L[0][10]),
L[1][11] = (
		moveleft-> L[0][11]| 
		moveright-> L[2][11]| 
		down -> L[1][10]),
L[2][11] = (
		moveleft-> L[1][11]| 
		moveright -> L[3][11]|
		down-> L[2][10]),
L[3][11] = (
		moveright-> L[4][11]|
		moveleft->L[2][11]|
		down -> L[3][10]),
L[4][11] = (
		moveleft-> L[3][11]| 
		moveright-> L[5][11]| 
		down -> L[4][10]),
L[5][11] = (
		moveleft-> L[4][11]| 
		moveright -> reachright -> L[5][11]|
		down -> L[5][10]),


L[0][10] = (
		moveright-> L[1][10]|
		moveleft->reachleft->L[0][10]|
		down  -> L[0][9]|
		up -> L[0][11]),
L[1][10] = (
		moveleft-> L[0][10]| 
		moveright-> L[2][10]| 
		down -> L[1][9]|
		up -> L[1][11]),
L[2][10] = (
		moveleft-> L[1][10]| 
		moveright -> L[3][10]|
		down-> L[2][9]|
		up -> L[2][11]),
L[3][10] = (
		moveright-> L[4][10]|
		moveleft->L[2][10]|
		down -> L[3][9]|
		up -> L[3][11]),
L[4][10] = (
		moveleft-> L[3][10]| 
		moveright-> L[5][10]| 
		down -> L[4][9]|
		up -> L[4][11]),
L[5][10] = (
		moveleft-> L[4][10]| 
		moveright -> reachright -> L[5][10]|
		down -> L[5][10]|
		up -> L[5][11]),


L[0][9] = (
		moveright-> L[1][9]|
		moveleft->reachleft->L[0][9]|
		down  -> L[0][8]|
		up -> L[0][10]),
L[1][9] = (
		moveleft-> L[0][9]| 
		moveright-> L[2][9]| 
		down -> L[1][8]|
		up -> L[1][10]),
L[2][9] = (
		moveleft-> L[1][9]| 
		moveright -> L[3][9]|
		down-> L[2][8]|
		up -> L[2][10]),
L[3][9] = (
		moveright-> L[4][9]|
		moveleft->L[2][9]|
		down -> L[3][8]|
		up -> L[3][10]),
L[4][9] = (
		moveleft-> L[3][9]| 
		moveright-> L[5][9]| 
		down -> L[4][8]|
		up -> L[4][10]),
L[5][9] = (
		moveleft-> L[4][9]| 
		moveright -> reachright -> L[5][9]|
		down -> L[5][8]|
		up -> L[5][10]),


L[0][8] = (
		moveright-> L[1][8]|
		moveleft->reachleft->L[0][8]|
		down  -> L[0][7]|
		up -> L[0][9]),
L[1][8] = (
		moveleft-> L[0][8]| 
		moveright-> L[2][8]| 
		down -> L[1][7]|
		up -> L[1][9]),
L[2][8] = (
		moveleft-> L[1][8]| 
		moveright -> L[3][8]|
		down-> L[2][7]|
		up -> L[2][9]),
L[3][8] = (
		moveright-> L[4][8]|
		moveleft->L[2][8]|
		down -> L[3][7]|
		up -> L[3][9]),
L[4][8] = (
		moveleft-> L[3][8]| 
		moveright-> L[5][8]| 
		down -> L[4][7]|
		up -> L[4][9]),
L[5][8] = (
		moveleft-> L[4][8]| 
		moveright -> reachright -> L[5][8]|
		down -> L[5][7]|
		up -> L[5][9]),


L[0][7] = (
		moveright-> L[1][7]|
		moveleft->reachleft->L[0][7]|
		down  -> L[0][6]|
		up -> L[0][8]),
L[1][7] = (
		moveleft-> L[0][7]| 
		moveright-> L[2][7]| 
		down -> L[1][6]|
		up -> L[1][8]),
L[2][7] = (
		moveleft-> L[1][7]| 
		moveright -> L[3][7]|
		down-> L[2][6]|
		up -> L[2][8]),
L[3][7] = (
		moveright-> L[4][7]|
		moveleft->L[2][7]|
		down -> L[3][6]|
		up -> L[3][8]),
L[4][7] = (
		moveleft-> L[3][7]| 
		moveright-> L[5][7]| 
		down -> L[4][6]|
		up -> L[4][8]),
L[5][7] = (
		moveleft-> L[4][7]| 
		moveright -> reachright -> L[5][7]|
		down -> L[5][6]|
		up -> L[5][8]),


L[0][6] = (
		moveright-> L[1][6]|
		moveleft->reachleft->L[0][6]|
		down  -> L[0][5]|
		up -> L[0][7]),
L[1][6] = (
		moveleft-> L[0][6]| 
		moveright-> L[2][6]| 
		down -> L[1][5]|
		up -> L[1][7]),
L[2][6] = (
		moveleft-> L[1][6]| 
		moveright -> L[3][6]|
		down-> L[2][5]|
		up -> L[2][7]),
L[3][6] = (
		moveright-> L[4][6]|
		moveleft->L[2][6]|
		down -> L[3][5]|
		up -> L[3][7]),
L[4][6] = (
		moveleft-> L[3][6]| 
		moveright-> L[5][6]| 
		down -> L[4][5]|
		up -> L[4][7]),
L[5][6] = (
		moveleft-> L[4][6]| 
		moveright -> reachright -> L[5][6]|
		down -> L[5][5]|
		up -> L[5][7]),



L[0][5] = (
		moveright-> L[1][5]|
		moveleft->reachleft->L[0][5]|
		down  -> L[0][4]|
		up -> L[0][6]),
L[1][5] = (
		moveleft-> L[0][5]| 
		moveright-> L[2][5]| 
		down -> L[1][4]|
		up -> L[1][6]),
L[2][5] = (
		moveleft-> L[1][5]| 
		moveright -> L[3][5]|
		down-> L[2][4]|
		up -> L[2][6]),
L[3][5] = (
		moveright-> L[4][5]|
		moveleft->L[2][5]|
		down -> L[3][5]|
		up -> L[3][6]),
L[4][5] = (
		moveleft-> L[3][5]| 
		moveright-> L[5][5]| 
		down -> L[4][4]|
		up -> L[4][6]),
L[5][5] = (
		moveleft-> L[4][5]| 
		moveright -> reachright -> L[5][5]|
		down -> L[5][4]|
		up -> L[5][6]),


L[0][4] = (
		moveright-> L[1][4]|
		moveleft->reachleft->L[0][4]|
		down  -> L[0][3]|
		up -> L[0][5]),
L[1][4] = (
		moveleft-> L[0][4]| 
		moveright-> L[2][4]| 
		down -> L[1][3]|
		up -> L[1][5]),
L[2][4] = (
		moveleft-> L[1][4]| 
		moveright -> L[3][4]|
		down-> L[2][3]|
		up -> L[2][5]),
L[3][4] = (
		moveright-> L[4][4]|
		moveleft->L[2][4]|
		down -> L[3][3]|
		up -> L[3][5]),
L[4][4] = (
		moveleft-> L[3][4]| 
		moveright-> L[5][4]| 
		down -> L[4][3]|
		up -> L[4][5]),
L[5][4] = (
		moveleft-> L[4][4]| 
		moveright -> reachright -> L[5][4]|
		down -> L[5][3]|
		up -> L[5][5]),


L[0][3] = (
		moveright-> L[1][3]|
		moveleft->reachleft->L[0][3]|
		down  -> L[0][2]|
		up -> L[0][4]),
L[1][3] = (
		moveleft-> L[0][3]| 
		moveright-> L[2][3]| 
		down -> L[1][2]|
		up -> L[1][4]),
L[2][3] = (
		moveleft-> L[1][3]| 
		moveright -> L[3][3]|
		down-> L[2][2]|
		up -> L[2][4]),
L[3][3] = (
		moveright-> L[4][3]|
		moveleft->L[2][3]|
		down -> L[3][2]|
		up -> L[3][4]),
L[4][3] = (
		moveleft-> L[3][3]| 
		moveright-> L[5][3]| 
		down -> L[4][2]|
		up -> L[4][4]),
L[5][3] = (
		moveleft-> L[4][3]| 
		moveright -> reachright -> L[5][3]|
		down -> L[5][2]|
		up -> L[5][4]),


L[0][2] = (
		moveright-> L[1][2]|
		moveleft->reachleft->L[0][2]|
		down  -> L[0][1]|
		up -> L[0][3]),
L[1][2] = (
		moveleft-> L[0][2]| 
		moveright-> L[2][2]| 
		down -> L[1][1]|
		up -> L[1][3]),
L[2][2] = (
		moveleft-> L[1][2]| 
		moveright -> L[3][2]|
		down-> L[2][1]|
		up -> L[2][3]),
L[3][2] = (
		moveright-> L[4][2]|
		moveleft->L[2][2]|
		down -> L[3][1]|
		up -> L[3][3]),
L[4][2] = (
		moveleft-> L[3][2]| 
		moveright-> L[5][2]| 
		down -> L[4][1]|
		up -> L[4][3]),
L[5][2] = (
		moveleft-> L[4][2]| 
		moveright -> reachright -> L[5][2]|
		down -> L[5][1]|
		up -> L[5][3]),


L[0][1] = (
		moveright-> L[1][1]|
		moveleft->reachleft->L[0][1]|
		down  -> L[0][0]|
		up -> L[0][2]),
L[1][1] = (
		moveleft-> L[0][1]| 
		moveright-> L[2][1]| 
		down -> L[1][0]|
		up -> L[1][2]),
L[2][1] = (
		moveleft-> L[1][1]| 
		moveright -> L[3][1]|
		down-> L[2][0]|
		up -> L[2][2]),
L[3][1] = (
		moveright-> L[4][1]|
		moveleft->L[2][1]|
		down -> L[3][0]|
		up -> L[3][2]),
L[4][1] = (
		moveleft-> L[3][1]| 
		moveright-> L[5][1]| 
		down -> L[4][0]|
		up -> L[4][2]),
L[5][1] = (
		moveleft-> L[4][1]| 
		moveright -> reachright -> L[5][1]|
		down -> L[5][0]|
		up -> L[5][2]),



L[0][0] = (
		moveright-> L[1][0]|
		moveleft->reachleft->L[0][0]|
		outstair -> FLOOR|
		up -> L[0][1]),
L[1][0] = (
		moveleft-> L[0][0]| 
		moveright-> L[2][0]| 
		outstair -> FLOOR|
		up -> L[1][1]),
L[2][0] = (
		moveleft-> L[1][0]| 
		moveright -> L[3][0]|
		outstair -> FLOOR|
		up -> L[2][1]),
L[3][0] = (
		moveright-> L[4][0]|
		moveleft->L[2][0]|
		outstair -> FLOOR|
		up -> L[3][1]),
L[4][0] = (
		moveleft-> L[3][0]| 
		moveright-> L[5][0]| 
		outstair -> FLOOR|
		up -> L[4][1]),
L[5][0] = (
		moveleft-> L[4][0]| 
		moveright -> reachright -> L[5][0]|
		outstair -> FLOOR|
		up -> L[5][1]),
FLOOR = (enterstair -> stop[0][11]-> L[0][11]).

F1 = (enterstair -> Stair| floorinit ->F[0][5]),
Stair = (outstair -> floorinit -> F[0][5]),
F[0][5] = (
		moverightf-> F[1][5]|
		moveleftf->reachleftf->F[0][5]|
		movefront -> F[0][4]),
F[1][5] = (
		moveleftf-> F[0][5]| 
		moverightf-> F[2][5]| 
		movefront-> F[1][4]),
F[2][5] = (
		moveleftf-> F[1][5]| 
		moverightf -> F[3][5]|
		movefront  -> F[2][4]),
F[3][5] = (
		moverightf-> F[4][5]|
		moveleftf->F[2][5]|
		movefront -> F[3][4]),
F[4][5] = (
		moveleftf-> F[3][5]| 
		moverightf-> F[5][5]| 
		movefront-> F[4][4]),
F[5][5] = (
		moveleftf-> F[4][5]| 
		moverightf -> F[6][5]|
		movefront -> F[5][4]),
F[6][5] = (
		moverightf-> F[7][5]|
		moveleftf->F[5][5]|
		movefront -> F[6][4]),
F[7][5] = (
		moveleftf-> F[6][5]| 
		moverightf-> F[8][5]| 
		movefront -> F[7][4]),
F[8][5] = (
		moveleftf-> F[7][5]| 
		moverightf -> F[9][5]|
		movefront -> F[8][4]),
F[9][5] = (
		moverightf-> F[10][5]|
		moveleftf->F[8][5]|
		movefront  -> F[9][4]),
F[10][5] = (
		moveleftf-> F[9][5]| 
		moverightf-> F[11][5]| 
		movefront -> F[10][4]),
F[11][5] = (
		moveleftf-> F[10][5]| 
		moverightf -> F[12][5]|
		movefront -> F[11][4]),
F[12][5] = (
		moverightf-> F[13][5]|
		moveleftf->F[11][5]|
		movefront -> F[12][4]),
F[13][5] = (
		moveleftf-> F[12][5]| 
		moverightf -> reachrightf-> F[13][5]| 
		movefront -> F[13][4]),
		

F[0][4] = (
		moverightf-> F[1][4]|
		moveleftf->reachleftf->F[0][4]|
		moveback -> F[0][5]|
		movefront -> F[0][3]),
F[1][4] = (
		moveleftf-> F[0][4]| 
		moverightf-> F[2][4]| 
		movefront-> F[1][3]|
		moveback -> F[1][5]),
F[2][4] = (
		moveleftf-> F[1][4]| 
		moverightf -> F[3][4]|
		movefront  -> F[2][3]|
		moveback -> F[2][5]),
F[3][4] = (
		moverightf-> F[4][4]|
		moveleftf->F[2][4]|
		moveback -> F[3][5]|
		movefront -> F[3][3]),
F[4][4] = (
		moveleftf-> F[3][4]| 
		moverightf-> F[5][4]|
		moveback -> F[4][5]| 
		movefront-> F[4][3]),
F[5][4] = (
		moveleftf-> F[4][4]| 
		moverightf -> F[6][4]|
		moveback -> F[5][5]|
		movefront -> F[5][3]),
F[6][4] = (
		moverightf-> F[7][4]|
		moveleftf->F[5][4]|
		moveback -> F[6][5]|
		movefront -> F[6][3]),
F[7][4] = (
		moveleftf-> F[6][4]| 
		moverightf-> F[8][4]|
		moveback -> F[7][5]| 
		movefront -> F[7][3]),
F[8][4] = (
		moveleftf-> F[7][4]| 
		moverightf -> F[9][4]|
		moveback -> F[8][5]|
		movefront -> F[8][3]),
F[9][4] = (
		moverightf-> F[10][4]|
		moveleftf->F[8][4]|
		moveback -> F[9][5]|
		movefront  -> F[9][3]),
F[10][4] = (
		moveleftf-> F[9][4]| 
		moverightf-> F[11][4]|
		moveback -> F[10][5]| 
		movefront -> F[10][4]),
F[11][4] = (
		moveleftf-> F[10][4]| 
		moverightf -> F[12][4]|
		moveback -> F[11][5]|
		movefront -> F[11][3]),
F[12][4] = (
		moverightf-> F[13][4]|
		moveleftf->F[11][4]|
		moveback -> F[12][5]|
		movefront -> F[12][3]),
F[13][4] = (
		moveleftf-> F[12][4]| 
		moverightf->reachrightf-> F[13][4]|
		moveback -> F[13][5]| 
		movefront -> F[13][3]),




F[0][3] = (
		moverightf-> F[1][3]|
		moveleftf->reachleftf->F[0][3]|
		moveback -> F[0][4]|
		movefront -> F[0][2]),
F[1][3] = (
		moveleftf-> F[0][3]| 
		moverightf-> F[2][3]| 
		movefront-> F[1][2]|
		moveback -> F[1][4]),
F[2][3] = (
		moveleftf-> F[1][3]| 
		moverightf -> F[3][3]|
		movefront  -> F[2][2]|
		moveback -> F[2][4]),
F[3][3] = (
		moverightf-> F[4][3]|
		moveleftf->F[2][3]|
		moveback -> F[3][4]|
		movefront -> F[3][2]),
F[4][3] = (
		moveleftf-> F[3][3]| 
		moverightf-> F[5][3]|
		moveback -> F[4][4]| 
		movefront-> F[4][2]),
F[5][3] = (
		moveleftf-> F[4][3]| 
		moverightf -> F[6][3]|
		moveback -> F[5][4]|
		movefront -> F[5][2]),
F[6][3] = (
		moverightf-> F[7][3]|
		moveleftf->F[5][3]|
		moveback -> F[6][4]|
		movefront -> F[6][2]),
F[7][3] = (
		moveleftf-> F[6][3]| 
		moverightf-> F[8][3]|
		moveback -> F[7][4]| 
		movefront -> F[7][2]),
F[8][3] = (
		moveleftf-> F[7][3]| 
		moverightf -> F[9][3]|
		moveback -> F[8][4]|
		movefront -> F[8][2]),
F[9][3] = (
		moverightf-> F[10][3]|
		moveleftf->F[8][3]|
		moveback -> F[9][4]|
		movefront  -> F[9][2]),
F[10][3] = (
		moveleftf-> F[9][3]| 
		moverightf-> F[11][3]|
		moveback -> F[10][4]| 
		movefront -> F[10][2]),
F[11][3] = (
		moveleftf-> F[10][3]| 
		moverightf -> F[12][3]|
		moveback -> F[11][4]|
		movefront -> F[11][2]),
F[12][3] = (
		moverightf-> F[13][3]|
		moveleftf->F[11][3]|
		moveback -> F[12][4]|
		movefront -> F[12][2]),
F[13][3] = (
		moveleftf-> F[12][3]| 
		moverightf->reachrightf-> F[13][3]|
		moveback -> F[13][4]| 
		movefront -> F[13][2]),



F[0][2] = (
		moverightf-> F[1][2]|
		moveleftf->reachleftf->F[0][2]|
		moveback -> F[0][3]|
		movefront -> F[0][1]),
F[1][2] = (
		moveleftf-> F[0][2]| 
		moverightf-> F[2][2]| 
		movefront-> F[1][1]|
		moveback -> F[1][3]),
F[2][2] = (
		moveleftf-> F[1][2]| 
		moverightf -> F[3][2]|
		movefront  -> F[2][1]|
		moveback -> F[2][3]),
F[3][2] = (
		moverightf-> F[4][2]|
		moveleftf->F[2][2]|
		moveback -> F[3][3]|
		movefront -> F[3][1]),
F[4][2] = (
		moveleftf-> F[3][2]| 
		moverightf-> F[5][2]|
		moveback -> F[4][3]| 
		movefront-> F[4][1]),
F[5][2] = (
		moveleftf-> F[4][2]| 
		moverightf -> F[6][2]|
		moveback -> F[5][3]|
		movefront -> F[5][1]),
F[6][2] = (
		moverightf-> F[7][2]|
		moveleftf->F[5][2]|
		moveback -> F[6][3]|
		movefront -> F[6][1]),
F[7][2] = (
		moveleftf-> F[6][2]| 
		moverightf-> F[8][2]|
		moveback -> F[7][3]| 
		movefront -> F[7][1]),
F[8][2] = (
		moveleftf-> F[7][2]| 
		moverightf -> F[9][2]|
		moveback -> F[8][3]|
		movefront -> F[8][1]),
F[9][2] = (
		moverightf-> F[10][2]|
		moveleftf->F[8][2]|
		moveback -> F[9][3]|
		movefront  -> F[9][1]),
F[10][2] = (
		moveleftf-> F[9][2]| 
		moverightf-> F[11][2]|
		moveback -> F[10][3]| 
		movefront -> F[10][1]),
F[11][2] = (
		moveleftf-> F[10][2]| 
		moverightf -> F[12][2]|
		moveback -> F[11][3]|
		movefront -> F[11][1]),
F[12][2] = (
		moverightf-> F[13][2]|
		moveleftf->F[11][2]|
		moveback -> F[12][3]|
		movefront -> F[12][1]),
F[13][2] = (
		moveleftf-> F[12][2]| 
		moverightf->reachrightf-> F[13][2]|
		moveback -> F[13][3]| 
		movefront -> F[13][1]),



F[0][1] = (
		moverightf-> F[1][1]|
		moveleftf->reachleftf->F[0][1]|
		moveback -> F[0][2]|
		movefront -> F[0][0]),
F[1][1] = (
		moveleftf-> F[0][1]| 
		moverightf-> F[2][1]| 
		movefront-> F[1][0]|
		moveback -> F[1][2]),
F[2][1] = (
		moveleftf-> F[1][1]| 
		moverightf -> F[3][1]|
		movefront  -> F[2][0]|
		moveback -> F[2][2]),
F[3][1] = (
		moverightf-> F[4][1]|
		moveleftf->F[2][1]|
		moveback -> F[3][2]|
		movefront -> F[3][0]),
F[4][1] = (
		moveleftf-> F[3][1]| 
		moverightf-> F[5][1]|
		moveback -> F[4][2]| 
		movefront-> F[4][0]),
F[5][1] = (
		moveleftf-> F[4][1]| 
		moverightf -> F[6][1]|
		moveback -> F[5][2]|
		movefront -> F[5][0]),
F[6][1] = (
		moverightf-> F[7][1]|
		moveleftf->F[5][1]|
		moveback -> F[6][2]|
		movefront -> F[6][0]),
F[7][1] = (
		moveleftf-> F[6][1]| 
		moverightf-> F[8][1]|
		moveback -> F[7][2]| 
		movefront -> F[7][0]),
F[8][1] = (
		moveleftf-> F[7][1]| 
		moverightf -> F[9][1]|
		moveback -> F[8][2]|
		movefront -> F[8][0]),
F[9][1] = (
		moverightf-> F[10][1]|
		moveleftf->F[8][1]|
		moveback -> F[9][2]|
		movefront  -> F[9][0]),
F[10][1] = (
		moveleftf-> F[9][1]| 
		moverightf-> F[11][1]|
		moveback -> F[10][2]| 
		movefront -> F[10][0]),
F[11][1] = (
		moveleftf-> F[10][1]| 
		moverightf -> F[12][1]|
		moveback -> F[11][2]|
		movefront -> F[11][0]),
F[12][1] = (
		moverightf-> F[13][1]|
		moveleftf->F[11][1]|
		moveback -> F[12][2]|
		movefront -> F[12][0]),
F[13][1] = (
		moveleftf-> F[12][1]| 
		moverightf->reachrightf-> F[13][1]|
		moveback -> F[13][2]| 
		movefront -> F[13][0]),



F[0][0] = (
		moverightf-> F[1][0]|
		moveleftf->reachleftf->F[0][0]|
		moveback -> F[0][1]),
F[1][0] = (
		moveleftf-> F[0][0]| 
		moverightf-> F[2][0]|
		moveback -> F[1][1]),
F[2][0] = (
		moveleftf-> F[1][0]| 
		moverightf -> F[3][0]|
		moveback -> F[2][1]),
F[3][0] = (
		moverightf-> F[4][0]|
		moveleftf->F[2][0]|
		moveback -> F[3][1]),
F[4][0] = (
		moveleftf-> F[3][0]| 
		moverightf-> F[5][0]|
		moveback -> F[4][1]),
F[5][0] = (
		moveleftf-> F[4][0]| 
		moverightf -> F[6][0]|
		moveback -> F[5][1]),
F[6][0] = (
		moverightf-> F[7][0]|
		moveleftf->F[5][0]|
		moveback -> F[6][1]),
F[7][0] = (
		moveleftf-> F[6][0]| 
		moverightf-> F[8][0]|
		moveback -> F[7][1]),
F[8][0] = (
		moveleftf-> F[7][0]| 
		moverightf -> F[9][0]|
		moveback -> F[8][1]),
F[9][0] = (
		moverightf-> F[10][0]|
		moveleftf->F[8][0]|
		moveback -> F[9][1]),
F[10][0] = (
		moveleftf-> F[9][0]| 
		moverightf-> F[11][0]|
		moveback -> F[10][1]),
F[11][0] = (
		moveleftf-> F[10][0]| 
		moverightf -> F[12][0]|
		moveback -> F[11][1]),
F[12][0] = (
		moverightf-> F[13][0]|
		moveleftf->F[11][0]|
		moveback -> F[12][1]),
F[13][0] = (
		moveleftf-> F[12][0]| 
		moverightf->reachrightf-> F[13][0]|
		moveback -> F[13][1]|
		enterstair -> STAIR).

controllerSpec SPECIFICATION = {
	safety = {DuplicateDown,CLEAN,ChangeStair,ConstRight,ConstLeft,RL,RR,INVALID}
	assumption ={DOWN}
	liveness = {SWEEP_RIGHT, SWEEP_LEFT}
	controllable = {StairControllable}
}
controller ||C = (L1)~{SPECIFICATION}.


controllerSpec SPECIFICATION2 = {
	safety = {DuplicateChangeLine,CLEAN_FLOOR,ChangeLine,ConstRightF,ConstLeftF,RLF,RRF,INVALIDF}
	assumption ={CHANGELINE}
	liveness = {SWEEP_RIGHTF,SWEEP_LEFTF}
	controllable = {FloorControllable}
}
controller ||C2 = (F1)~{SPECIFICATION2}.

||SWEEP = (C||C2).
