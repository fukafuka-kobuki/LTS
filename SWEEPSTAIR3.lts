
const MaxTime = 3
range Times = 0..MaxTime

set MoveStair = {enterstair,achievef}
set Controllable = {moveright, moveleft, down,MoveStair}
set CountAction = {count}
//set Controllable1 = {floorinit,changeline,moveleftf,moverightf,MoveStair}
set Actions = {Controllable,achieve,outstair}


fluent MOVERIGHT = <moveright, achieve>
fluent MOVELEFT = <moveleft, achieve>
fluent Down = <down,achieve>

fluent CHANGELINE = <changeline,achievef>
fluent MOVERIGHTF = <moverightf, achievef>
fluent MOVELEFTF = <moveleftf, achievef>

fluent ENTERSTAIR = <enterstair,outstair>
fluent OUTSTAIR = <outstair,enterstair>

fluent FLOORINIT = <floorinit, enterstair>

assert MOVE_RIGHTF = MOVERIGHTF
assert MOVE_LEFTF = MOVELEFTF
assert CHANGE_LINE = CHANGELINE

assert FLOOR_INIT = FLOORINIT
assert ENTER_STAIR = ENTERSTAIR
assert OUT_STAIR = OUTSTAIR
assert MOVE_RIGHT = MOVERIGHT
assert MOVE_LEFT = MOVELEFT
assert DOWN = Down


//ltl_property OUTSTAIR1 = [](ENTER_STAIR -> (<>OUTSTAIR))


L1 = START,
START = (enterstair->LEFTSIDE),
LEFTSIDE = (moveright ->achieve-> RIGHTSIDE
			|moveleft ->achieve-> LEFTSIDE
			|down ->(achieve-> RIGHTSIDE|outstair -> START)
//			|down ->CHECK
//			|down ->outstair -> START
),
RIGHTSIDE =(moveright ->achieve-> RIGHTSIDE
			|moveleft ->achieve-> LEFTSIDE
//			|down ->CHECK
			|down ->(achieve-> RIGHTSIDE|outstair -> START)
//			|down ->outstair -> START
//),
//CHECK = (achieve-> LEFTSIDE
//		|outstair -> START
).



const X_MAX = 3
const Y_MAX = 2
range X = 0..X_MAX
range Y = 0..Y_MAX

set Out ={move[X_MAX+1][Y], move[X][Y_MAX+1], move[-1][Y], move[X][-1],  jump[X_MAX+1][Y], jump[X][Y_MAX+1], jump[-1][Y], jump[X][-1]}
set JumpAction = {jump[0][2],jump[1][2],jump[2][2],jump[3][2],jump[0][0],jump[0][0],jump[0][0],jump[0][0]}
set FlagAction = {stop[0][2],stop[1][2],stop[2][2],stop[3][2],stop[0][0],stop[0][0],stop[0][0],stop[0][0]}
set MoveAction = {move[0][2],move[1][2],move[2][2],move[3][2],move[0][0],move[0][0],move[0][0],move[0][0],JumpAction,FlagAction, Out}
set FloorControllable = {enterstair,outstair,floorinit,MoveAction, Out}




fluent OFF = <off, on>
fluent ON = <on, off>
fluent LOCATION[x:X][y:Y]=<{stop[x][y]},{FlagAction}\{stop[x][y]}>
fluent JUMP[x:X][y:Y] = <jump[x][y],MoveAction\{jump[x][y]}>
fluent MOVE[x:X][y:Y] = <move[x][y],MoveAction\{move[x][y]}>
fluent NAVIGATION = <navigate, end>

fluent CLEANACHIEVE[x:X][y:Y]=<{stop[x][y]},off>

assert CLEAN_ACHIEVE = (CLEANACHIEVE[0][0]&&CLEANACHIEVE[0][1]&&CLEANACHIEVE[0][2]&&CLEANACHIEVE[1][0]&&CLEANACHIEVE[1][1]&&CLEANACHIEVE[1][2]&&CLEANACHIEVE[2][0]&&CLEANACHIEVE[2][1]&&CLEANACHIEVE[2][2]&&CLEANACHIEVE[3][0]&&CLEANACHIEVE[3][1]&&CLEANACHIEVE[3][2])



assert TURN_OFF = (LOCATION[0][0]&&OFF)
assert TURN_ON = ON
assert NAVIGATION_GOAL = (LOCATION[3][1]&&NAVIGATION)




assert MISS_JUMP36 =(LOCATION[0][2]&&JUMP[1][2])
assert MISS_JUMP35 =(LOCATION[0][2]&&JUMP[0][1])
assert MISS_JUMP63 =(LOCATION[1][2]&&JUMP[0][2])
assert MISS_JUMP69 =(LOCATION[1][2]&&JUMP[2][2])
assert MISS_JUMP96 =(LOCATION[2][2]&&JUMP[1][2])
assert MISS_JUMP912 =(LOCATION[2][2]&&JUMP[3][2])
assert MISS_JUMP129 =(LOCATION[3][2]&&JUMP[2][2])
assert MISS_JUMP128 =(LOCATION[3][2]&&JUMP[3][1])
assert MISS_JUMP53 =(LOCATION[0][1]&&JUMP[0][2])
assert MISS_JUMP56 =(LOCATION[0][1]&&JUMP[1][1])
assert MISS_JUMP65 =(LOCATION[1][1]&&JUMP[0][1])
assert MISS_JUMP67 =(LOCATION[1][1]&&JUMP[2][1])
assert MISS_JUMP76 =(LOCATION[2][1]&&JUMP[1][1])
assert MISS_JUMP78 =(LOCATION[2][1]&&JUMP[3][1])
assert MISS_JUMP87 =(LOCATION[3][1]&&JUMP[2][1])
assert MISS_JUMP812 =(LOCATION[3][1]&&JUMP[3][2])


ltl_property INVALID_MOVE36 = []!(MISS_JUMP36)
ltl_property INVALID_MOVE35 = []!(MISS_JUMP35)
ltl_property INVALID_MOVE63 = []!(MISS_JUMP63)
ltl_property INVALID_MOVE69 = []!(MISS_JUMP69)
ltl_property INVALID_MOVE96 = []!(MISS_JUMP96)
ltl_property INVALID_MOVE912 = []!(MISS_JUMP912)
ltl_property INVALID_MOVE129 = []!(MISS_JUMP129)
ltl_property INVALID_MOVE128 = []!(MISS_JUMP128)
ltl_property INVALID_MOVE53 = []!(MISS_JUMP53)
ltl_property INVALID_MOVE56 = []!(MISS_JUMP56)
ltl_property INVALID_MOVE65 = []!(MISS_JUMP65)
ltl_property INVALID_MOVE67 = []!(MISS_JUMP67)
ltl_property INVALID_MOVE76 = []!(MISS_JUMP76)
ltl_property INVALID_MOVE78 = []!(MISS_JUMP78)
ltl_property INVALID_MOVE87 = []!(MISS_JUMP87)
ltl_property INVALID_MOVE812 = []!(MISS_JUMP812)


fluent OUT =<Out , {FloorControllable}\{Out}>
ltl_property INVALID_ACTION= []!(OUT)



Floor = (enterstair ->STAIR|floorinit->START),
START = (stop[0][2] -> L[0][2]),
L[0][2] = (navigate ->end-> L[0][2]|
		move[1][2]->stop[1][2]-> L[1][2]| 
		jump[1][2]->stop[1][2]-> L[1][2]| 
		move[0][1]->stop[0][1]-> L[0][1]| 
		jump[0][1]->stop[0][1]-> L[0][1]| 
		off -> START),

L[1][2] = (navigate ->end-> L[1][2]|
		move[0][2]->stop[0][2]-> L[0][2]| 
		jump[0][2]->stop[0][2]-> L[0][2]| 
		move[2][2]->stop[2][2]-> L[2][2]| 
		jump[2][2]->stop[2][2]-> L[2][2]| 
		off -> START),

L[2][2] = (navigate ->end-> L[2][2]|
		move[1][2]->stop[1][2]-> L[1][2]| 
		jump[1][2]->stop[1][2]-> L[1][2]| 
		move[3][2]->stop[3][2]-> L[3][2]| 
		jump[3][2]->stop[3][2]-> L[3][2]| 
		off -> START),

L[3][2] = (navigate ->end-> L[3][2]|
		move[2][2]->stop[2][2]-> L[2][2]| 
		jump[2][2]->stop[2][2]-> L[2][2]| 
		move[3][1]->stop[3][1]-> L[3][1]| 
		jump[3][1]->stop[3][1]-> L[3][1]| 
		enterstair -> STAIR|
		off -> START),

L[0][1] = (navigate ->end-> L[0][1]|
		move[0][2]->stop[0][2]-> L[0][2]| 
		jump[0][2]->stop[0][2]-> L[0][2]| 
		move[1][1]->stop[1][1]-> L[1][1]| 
		jump[1][1]->stop[1][1]-> L[1][1]| 
		off -> START),

L[1][1] = (navigate ->end-> L[1][1]|
		move[0][1]->stop[0][1]-> L[0][1]| 
		jump[0][1]->stop[0][1]-> L[0][1]| 
		move[2][1]->stop[2][1]-> L[2][1]| 
		jump[2][1]->stop[2][1]-> L[2][1]| 
		off -> START),

L[2][1] = (navigate ->end-> L[2][1]|
		move[1][1]->stop[1][1]-> L[1][1]| 
		jump[1][1]->stop[1][1]-> L[1][1]| 
		move[3][1]->stop[3][1]-> L[3][1]| 
		jump[3][1]->stop[3][1]-> L[3][1]| 
		off -> START),

L[3][1] = (navigate ->end-> L[3][1]|
		move[2][1]->stop[2][1]-> L[2][1]| 
		jump[2][1]->stop[2][1]-> L[2][1]| 
		move[3][2]->stop[3][2]-> L[3][2]| 
		jump[3][2]->stop[3][2]-> L[3][2]| 
		off -> START),
OUT_CONTROLL = (out -> OUT_CONTROLL),
STAIR = (outstair -> floorinit -> L[0][2]).












controllerSpec SPECIFICATION = {
	safety = {}
	assumption = {ENTER_STAIR}
	liveness = {MOVE_RIGHT,MOVE_LEFT,DOWN}
//	liveness = {OUT_STAIR}
	controllable = {Controllable}
}
controller ||StairSweep = (L1)~{SPECIFICATION}.



INFLOOR = (enterstair->INSTAIR),
INSTAIR = (outstair -> floorinit -> INFLOOR).




COUNT = COUNT[0],
COUNT[i:Times] = (count -> COUNT[i+1]
                 |floorinit -> COUNT),
COUNT[MaxTime+1] = ERROR.


controllerSpec COUNTSPEC = {
	assumption = {}
	liveness = {}
	controllable = {CountAction}
}
controller ||COUNTCONTROLL = (COUNT)~{COUNTSPEC}.





controllerSpec SPECIFICATION1 = {
	safety = {INVALID_ACTION,INVALID_MOVE36,INVALID_MOVE35,INVALID_MOVE63,INVALID_MOVE69,INVALID_MOVE96,INVALID_MOVE912,INVALID_MOVE129,INVALID_MOVE128,INVALID_MOVE53,INVALID_MOVE56,INVALID_MOVE65,INVALID_MOVE67,INVALID_MOVE76,INVALID_MOVE78,INVALID_MOVE87,INVALID_MOVE812}
	assumption ={FLOOR_INIT}
	liveness = {CLEAN_ACHIEVE,ENTER_STAIR}
	controllable = {FloorControllable}
}
controller ||FloorSweep = (Floor)~{SPECIFICATION1}.


||SWEEP = (FloorSweep||StairSweep ||Procedure).


controllerSpec SPECIFICATION2 = {
	safety = {}
	assumption ={ENTER_STAIR}
	liveness = {OUT_STAIR}
	controllable = {MoveStair}
}
controller ||Whole = (SWEEP)~{SPECIFICATION2}.




