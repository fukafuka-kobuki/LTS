//Sxmax: 棚配置の縦列数
//Symax: 棚配置の横列数
//→棚の数= Sxmax * Symax
//AgentNum: Agentの数
//StationNum:Station(workerの待機場所)の数
//DockNum: Dock(Agentの待機場所)の数
//
//これらの数値を変更すれば環境モデルを構築可能

const Sxmax = 2
const Symax = 2

const AgentNum = 2
const StationNum = 2
const DockNum = 2
const MaxTime = 7

range Sx = 1..Sxmax
range Sy = 1..Symax

range Agent = 1..AgentNum
range Station = 1..StationNum
range Dock = 1..DockNum
range Times = 0..MaxTime

set Controllable1 = {start,[1].moveShelf[Sx][Sy],[1].moveDock[Dock],[1].moveStation[Station], [1].pick, [1].put, [1].end,[1].reset}
set Controllable2 = {start,[2].moveShelf[Sx][Sy],[2].moveDock[Dock],[2].moveStation[Station], [2].pick, [2].put, [2].end,[2].reset}
set Controllable = {Controllable1,Controllable2}
set Monitorable = {[Agent].arriveShelf[Sx][Sy],[Agent].arriveDock[Dock],[Agent].arriveStation[Station], [Agent].picksucc, [Agent].pickfail, [Agent].putsucc, [Agent].putfail}



///////////////////////Time_Constraint///////////////////////
COUNT(C = 1)=COUNT[0],
COUNT[i:Times]=(
	when(i==MaxTime)Controllable1\{[C].end,[C].reset} -> ERROR
	|when(i!=MaxTime)Controllable1\{[C].end,[C].reset}->COUNT[i+1]
	|[C].end->[C].reset->COUNT
).


//environment model
AGENT(I=1) = (start -> START),
START = ([I].arriveDock[I]->DOCK[I][I]),
DOCK[dc:Dock][a:Agent] = (
	[I].moveDock[d:Dock] -> [I].arriveDock[d]-> DOCK[d][a]
	|[I].moveShelf[sx:Sx][sy:Sy] ->[I].arriveShelf[sx][sy] ->SHELF[sx][sy][a]
	|[I].moveStation[st:Station] -> [I].arriveStation[st] -> STATION[st][a] 	
	|[I].pick->
		([I].picksucc-> DOCK[dc][a]
		)
	|[I].put->
		([I].putsucc-> DOCK[dc][a]
		)
	|[I].end ->[I].reset -> DOCK[dc][a]
),
SHELF[sxc:Sx][syc:Sy][a:Agent]=(
	[I].moveDock[d:Dock] -> [I].arriveDock[d]-> DOCK[d][a]
	|[I].moveShelf[sx:Sx][sy:Sy] ->[I].arriveShelf[sx][sy] ->SHELF[sx][sy][a]
	|[I].moveStation[st:Station] -> [I].arriveStation[st] -> STATION[st][a] 	
	|[I].pick->
		([I].picksucc-> SHELF[sxc][syc][a]
//		|[I].pickfail->SHELF[sxc][syc][I]
		)
	|[I].put->
		([I].putsucc->SHELF[sxc][syc][a]
//		|[I].putfail->SHELF[sxc][syc][I]
		)
),
STATION[stc:Station][a:Agent]=(
	[I].moveDock[d:Dock] -> [I].arriveDock[d]-> DOCK[d][a]
	|[I].moveShelf[sx:Sx][sy:Sy] ->[I].arriveShelf[sx][sy] ->SHELF[sx][sy][a]
	|[I].moveStation[st:Station] -> [I].arriveStation[st] -> STATION[st][a] 	
	|[I].pick->
		([I].picksucc-> STATION[stc][a]
//		|[I].pickfail->STATION[stc][I]
		)
	|[I].put->
		([I].putsucc-> STATION[stc][a]
//		|[I].putfail->STATION[stc][I]
		)
).

||ALL(N = AgentNum)=
	forall [i: 1..N]
 	(AGENT(i)).
   

//flusent definition
fluent Docking[a:Agent][d:Dock] = <[a].arriveDock[d], {[a].moveDock[Dock],[a].moveStation[Station],[a].moveShelf[Sx][Sy]}> 
fluent MoveToDock[a:Agent][d:Dock]=<[a].moveDock[d], {[a].moveDock[Dock],[a].moveStation[Station],[a].moveShelf[Sx][Sy]}\{[a].moveDock[d]}>
fluent Stationing[a:Agent][s:Station] = <[a].arriveStation[s], {[a].moveDock[Dock],[a].moveStation[Station],[a].moveShelf[Sx][Sy]}> 
fluent MoveToStation[a:Agent][s:Station]=<[a].moveStation[s], {[a].moveDock[Dock],[a].moveStation[Station],[a].moveShelf[Sx][Sy]}\{[a].moveStation[s]}>
fluent MoveStation[a:Agent][s:Station]=<[a].moveStation[s], [a].arriveStation[Station]>
fluent Shelfing[a:Agent][x:Sx][y:Sy] = <[a].arriveShelf[x][y], {[a].moveDock[Dock],[a].moveStation[Station],[a].moveShelf[Sx][Sy]}> 
fluent MoveToShelf[a:Agent][x:Sx][y:Sy]=<[a].moveShelf[x][y], {[a].moveDock[Dock],[a].moveStation[Station],[a].moveShelf[Sx][Sy]}\{[a].moveShelf[x][y]}>
fluent Pick[a:Agent] = <[a].pick,[a].put>
fluent Put[a:Agent] = <[a].put,[a].pick>
fluent FlagPick[a:Agent] = <[a].pick,{[a].moveShelf[Sx][Sy],[a].moveDock[Dock],[a].moveStation[Station]}>
fluent FlagPut[a:Agent] = <[a].put,{[a].moveShelf[Sx][Sy],[a].moveDock[Dock],[a].moveStation[Station]}>
fluent ArriveSpecificShelf[a:Agent][x:Sx][y:Sy] = <[a].moveShelf[x][y], {[a].moveShelf[Sx][Sy],[a].moveStation[Station],[a].moveDock[Dock]}\{[a].moveShelf[x][y]}>
fluent ArriveSpecificStation[a:Agent][s:Station] = <[a].moveStation[s], {[a].moveShelf[Sx][Sy],[a].moveStation[Station],[a].moveDock[Dock]}\{[a].moveStation[s]}>
fluent FinishTask[a:Agent] = <[a].end, [a].reset>
fluent Picked[a:Agent] = <[a].pick, [a].reset>
fluent Puted[a: Agent] = <[a].put, [a].reset>

assert PICKinSTATION1 = (Stationing[1][Station] && FlagPick[1])
assert PICKinDOCK1 = (Docking[1][Dock] && FlagPick[1])
assert PUTinDOCK1 = (Docking[1][Dock]&& FlagPut[1])
assert PUTinSTATION1 = (Stationing[1][Station] && FlagPut[1])

assert Goal10 = (ArriveSpecificShelf[1][1][1]&&Pick[1])
assert Goal11 =(ArriveSpecificStation[1][1])
assert Goal12 = (ArriveSpecificShelf[1][1][1] && Put[1])
assert Goal13 = (FinishTask[1])

//ltl_property MustDoTask = []()
ltl_property STATIONALONE1 = [](MoveStation[1][Station] -> Pick[1])
ltl_property BackWithShelf1 = [](MoveToDock[1][Dock] -> !Pick[1])
ltl_property ILLIGALPICK1 = []!(PICKinSTATION1 ||PICKinDOCK1)
ltl_property ILLIGALPUT1 = []!(PUTinDOCK1|| PUTinSTATION1)
ltl_property RePICK1 = []((Pick[1] ->X![1].pick)W [1].reset)
ltl_property RePut1 = []((Put[1] -> X![1].put)W [1].reset)
ltl_property EndAfterTask1 = [](FinishTask[1]-> (Picked[1] && Puted[1]))

controllerSpec AGENT1SPEC = {
	safety = {BackWithShelf1,ILLIGALPICK1,ILLIGALPUT1,STATIONALONE1,RePICK1, RePut1,EndAfterTask1}
	liveness = {Goal10,Goal11,Goal12, Goal13}
	controllable = {Controllable1}
}
controller ||ACONT1 = (AGENT(1)||COUNT(1))~{AGENT1SPEC}.
//controller ||ACONT1 = (AGENT(1))~{AGENT1SPEC}.

assert PICKinSTATION2 = (Stationing[2][Station] && FlagPick[1])
assert PICKinDOCK2 = (Docking[2][Dock] && FlagPick[1])

ltl_property STATIONALONE2 = [](MoveStation[2][Station] -> Pick[2])
ltl_property BackWithShelf2 = [](MoveToDock[2][Dock] -> !Pick[2])
ltl_property ILLIGALPICK2 = []!(PICKinSTATION2 ||PICKinDOCK2)
ltl_property RePICK2 = [](Pick[2] ->X![2].pick)
ltl_property RePut2 = [](Put[2] -> X![2].put)



assert Assumption2 = (ArriveSpecificShelf[2][1][1]&&Pick[2])
assert Goal21 =(ArriveSpecificStation[2][1])
assert Goal22 = (ArriveSpecificShelf[2][1][1] && Put[2])
assert Goal23 = (FinishTask[2])



controllerSpec AGENT2SPEC = {
	safety = {BackWithShelf2,ILLIGALPICK2,STATIONALONE2,RePICK2, RePut2}
	assumption = {Assumption2}
	liveness = {Goal21, Goal22, Goal23}
	controllable = {Controllable2}
}
controller ||ACONT2 = (AGENT(2))~{AGENT2SPEC}.


||ALLCONT =(ACONT1||ACONT2).


assert DUPLIDOCKING1 =(Docking[1][1]&&MoveToDock[2][1])
assert DUPLIDOCKING2 =(Docking[1][2]&&MoveToDock[2][2])
assert DUPLIDOCKING3 =(Docking[2][1]&&MoveToDock[1][1])
assert DUPLIDOCKING4 =(Docking[2][2]&&MoveToDock[1][2])

assert DUPLISTATION1 =(Stationing[1][1]&&MoveToStation[2][1])
assert DUPLISTATION2 =(Stationing[1][2]&&MoveToStation[2][2])
assert DUPLISTATION3 =(Stationing[2][1]&&MoveToStation[1][1])
assert DUPLISTATION4 =(Stationing[2][2]&&MoveToStation[1][2])

assert DUPLISHELFING1 =(Shelfing[1][1][1]&&MoveToShelf[2][1][1])
assert DUPLISHELFING2 =(Shelfing[1][2][1]&&MoveToShelf[2][2][1])
assert DUPLISHELFING3 =(Shelfing[2][1][1]&&MoveToShelf[1][1][1])
assert DUPLISHELFING4 =(Shelfing[2][2][1]&&MoveToShelf[1][2][1])


ltl_property DUPLI = []!(DUPLIDOCKING1||DUPLIDOCKING2||DUPLIDOCKING3||DUPLIDOCKING4)
ltl_property DUPLIST = []!(DUPLISTATION1||DUPLISTATION2||DUPLISTATION3||DUPLISTATION4)
ltl_property DUPLISH = []!(DUPLISHELFING1||DUPLISHELFING2||DUPLISHELFING3||DUPLISHELFING4)

controllerSpec KIVASYSTEM = {
	safety = {DUPLI,DUPLIST,DUPLISH}
	controllable = {Controllable}
}

controller ||WHOLE = (ALLCONT)~{KIVASYSTEM}.



//要求中心or実装中心
//来週まで：どういう捨象ができるか

